<?xml version="1.0" encoding="UTF-8" standalone="no"?><Entities build="b46" majorVersion="8" minorVersion="0" modelPersistenceProviderPackage="PostgresPersistenceProviderPackage" revision="4" schemaVersion="1000"><Things><Thing description="Services used to create/delete/modify users in the ThingWorx System" documentationContent="" effectiveThingPackage="ConfiguredThing" enabled="true" homeMashup="" identifier="" lastModifiedDate="2017-10-24T18:36:44.732Z" name="User_Management_Util" projectName="CogniPro" published="false" tags="" thingTemplate="GenericThing" valueStream=""><Owner name="p54284" type="User"/><avatar/><DesignTimePermissions><Create/><Read/><Update/><Delete/><Metadata/></DesignTimePermissions><RunTimePermissions/><VisibilityPermissions><Visibility/></VisibilityPermissions><ConfigurationTables/><ThingShape><PropertyDefinitions/><ServiceDefinitions><ServiceDefinition aspect.isAsync="false" category="" description="Given a user ID, checks if the user already exists in the system." isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="CheckIfUserExists"><ResultType baseType="BOOLEAN" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="UserId" ordinal="1"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="Creates a new user given the necessary inputs. Returns a success/failure message." isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="CreateNewUser"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="ClientId" ordinal="2"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="Email" ordinal="3"/><FieldDefinition aspect.isRequired="true" baseType="BOOLEAN" description="" name="EmailPreference" ordinal="8"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="FirstName" ordinal="4"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="Language" ordinal="7"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="LastName" ordinal="5"/><FieldDefinition aspect.isRequired="false" baseType="STRING" description="" name="Phone" ordinal="6"/><FieldDefinition aspect.isRequired="true" baseType="BOOLEAN" description="" name="PhonePreference" ordinal="9"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="UserId" ordinal="1"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="Deletes a user by given user ID. Returns a success/failure message." isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="DeleteUserById"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="UserId" ordinal="1"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="Modifies a user by the given user ID. Returns a success/failure message." isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="ModifyUserByUserId"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="Email" ordinal="2"/><FieldDefinition aspect.isRequired="true" baseType="BOOLEAN" description="" name="EmailPreference" ordinal="7"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="FirstName" ordinal="3"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="Language" ordinal="6"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="LastName" ordinal="4"/><FieldDefinition baseType="STRING" description="" name="Phone" ordinal="5"/><FieldDefinition aspect.isRequired="true" baseType="BOOLEAN" description="" name="PhonePreference" ordinal="8"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="UserId" ordinal="1"/></ParameterDefinitions></ServiceDefinition></ServiceDefinitions><EventDefinitions/><ServiceMappings/><ServiceImplementations><ServiceImplementation description="" handlerName="Script" name="CheckIfUserExists"><ConfigurationTables><ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[var params = {
	nameMask: UserId /* STRING */,
	type: "User" /* STRING */
};

// result: INFOTABLE dataShape: RootEntityList
var users = Resources["EntityServices"].GetEntityList(params);
if(users.rows.length > 0)
    result = true;
else
    result = false;]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="CreateNewUser"><ConfigurationTables><ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[var params = {
	UserId: UserId /* STRING */
};
// result: BOOLEAN
var userExists = me.CheckIfUserExists(params);

if(userExists)
{
    throw("A user with this ID already exists. Please choose a unique ID.");
    //result = "A user with this ID already exists. Please choose a unique ID.";
}
else
{
    try
    {
        var params = {
            password: "password1" /* STRING */,
            name: UserId /* STRING */,
            description: UserId /* STRING */
        };
        // no return
        Resources["EntityServices"].CreateUser(params);

        Users[UserId].emailAddress = Email;
        Users[UserId].firstName = FirstName;
        Users[UserId].lastName = LastName;
        Users[UserId].workPhone = Phone;
        Users[UserId].language = Language;
        Users[UserId].clientId = ClientId;
        Users[UserId].notifyByEmail = EmailPreference;
        Users[UserId].notifyByMobilePhone = PhonePreference;
        //result = "User Successfully Created!";
    }
    catch (err)
    {
        logger.error("Unable to create new user with ID: " + UserId + err);
        var params = {
            name: UserId /* USERNAME */
        };
        // no return
        Resources["EntityServices"].DeleteUser(params);
        throw("Unable to create user, please contact an Administrator");

        //result = "Unable to create user, please contact an Administrator.";
    }
}]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="DeleteUserById"><ConfigurationTables><ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[var params = {
	UserId: UserId /* STRING */
};

// result: BOOLEAN
var userExists = me.CheckIfUserExists(params);

if(userExists)
{
    try
    {
        var params = {
            name: UserId /* USERNAME */
        };
        // no return
        Resources["EntityServices"].DeleteUser(params);
        //result = "User succesfully deleted!";
    }
    catch (err)
    {
        //result = "Unable to delete user. Please contact an Admininistrator.";
        logger.error("Cannot delete user: " + UserId + err);
        throw("Unable to delete user. Please contact an Admininistrator.");
    }
}
else
{
    //result = "No user with this Id exists. No deletion will be performed.";
    throw("No user with this Id exists. No deletion will be performed.");
}]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="ModifyUserByUserId"><ConfigurationTables><ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[var params = {
	UserId: UserId /* STRING */
};
// result: BOOLEAN
var userIdCheck = me.CheckIfUserExists(params);

if(userIdCheck)
{
	try
    {
        Users[UserId].emailAddress = Email;
        Users[UserId].firstName = FirstName;
        Users[UserId].lastName = LastName;
        Users[UserId].workPhone = Phone;
        Users[UserId].language = Language;
        Users[UserId].clientId = ClientId;
        Users[UserId].notifyByEmail = EmailPreference;
        Users[UserId].notifyByMobilePhone = PhonePreference;
        //result = "User Successfully Updated!";
    }
    catch (err)
    {
        //result = "Unable to update user. Please contact an Administrator.";
        logger.error("Cannot update user: " + UserId + err);
        throw("Unable to update user. Please contact an Administrator.");
    }
}    
else
{
    //result = "A user with this ID does not exist. No modifications will be performed.";
    throw("A user with this ID does not exist. No modifications will be performed.");
}]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></ServiceImplementations><Subscriptions/></ThingShape><PropertyBindings/><RemotePropertyBindings/><RemoteServiceBindings/><RemoteEventBindings/><AlertConfigurations/><ImplementedShapes/><ThingProperties/><ConfigurationChanges><ConfigurationChange changeAction="CREATE" changeReason="header : name : updated&#10;" timestamp="2017-10-24T18:14:36.788Z" user="p54284"/><ConfigurationChange changeAction="MODIFY" changeReason="services : CreateNewUser : Code Updated&#10;" timestamp="2017-10-24T18:32:04.750Z" user="p54284"/><ConfigurationChange changeAction="MODIFY" changeReason="services : CreateNewUser : Output Updated, Code Updated&#10;" timestamp="2017-10-24T18:33:09.502Z" user="p54284"/><ConfigurationChange changeAction="MODIFY" changeReason="services : DeleteUserById : Code Updated, Output Updated, ModifyUserByUserId : Code Updated, Output Updated&#10;" timestamp="2017-10-24T18:34:56.456Z" user="p54284"/><ConfigurationChange changeAction="MODIFY" changeReason="" timestamp="2017-10-24T18:36:44.731Z" user="p54284"/></ConfigurationChanges></Thing></Things></Entities>