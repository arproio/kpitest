<?xml version="1.0" encoding="UTF-8" standalone="no"?><Entities build="b46" majorVersion="8" minorVersion="0" modelPersistenceProviderPackage="PostgresPersistenceProviderPackage" revision="4" schemaVersion="1000"><Things><Thing description="Services used for Alert Management" documentationContent="" effectiveThingPackage="ConfiguredThing" enabled="true" homeMashup="" identifier="" lastModifiedDate="2017-10-24T20:08:14.538Z" name="Alert_Management_Util" projectName="CogniPro" published="false" tags="" thingTemplate="GenericThing" valueStream=""><Owner name="p54284" type="User"/><avatar/><DesignTimePermissions><Create/><Read/><Update/><Delete/><Metadata/></DesignTimePermissions><RunTimePermissions/><VisibilityPermissions><Visibility/></VisibilityPermissions><ConfigurationTables/><ThingShape><PropertyDefinitions/><ServiceDefinitions><ServiceDefinition aspect.isAsync="false" category="" description="Service to return alerts for the given user over a time period" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="RetrieveAllAlertsByUserId"><ResultType aspect.dataShape="AlertHistory" aspect.isStreamEntry="true" baseType="INFOTABLE" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.defaultValue="30.0" baseType="NUMBER" description="" name="HistoricalDays" ordinal="2"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="UserId" ordinal="1"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="Returns list of available alerts for given asset ID(s)" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="RetrieveConfiguredAlertsByAssetId"><ResultType baseType="JSON" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.isRequired="true" baseType="JSON" description="" name="AssetInfo" ordinal="1"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="Returns list of available alerts for given line ID(s)" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="RetrieveConfiguredAlertsByLineId"><ResultType baseType="JSON" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.isRequired="true" baseType="JSON" description="" name="LineInfo" ordinal="1"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="Subscribe to a configured alert for a given Asset" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="SubscribeToAlertByUserIdAssetId"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.isRequired="true" baseType="JSON" description="" name="SubscriptionInfo" ordinal="1"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="SubscribeToAlertByUserIdLineId"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.isRequired="true" baseType="JSON" description="" name="SubscriptionInfo" ordinal="1"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="Unsubscribe to a configured alert for a given Asset" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="UnsubscribeFromAlertByUserIdAssetId"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.isRequired="true" baseType="JSON" description="" name="SubscriptionInfo" ordinal="1"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="Unsubscribe to a configured alert for a given Line" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="UnsubscribeFromAlertByUserIdLineId"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.isRequired="true" baseType="JSON" description="" name="SubscriptionInfo" ordinal="1"/></ParameterDefinitions></ServiceDefinition></ServiceDefinitions><EventDefinitions/><ServiceMappings/><ServiceImplementations><ServiceImplementation description="" handlerName="Script" name="RetrieveAllAlertsByUserId"><ConfigurationTables><ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[var params = {
	infoTableName: "result" /* STRING */
};

// result: INFOTABLE
var result = Resources["InfoTableFunctions"].CreateInfoTable(params);



var endDate = new Date();
var startDate = dateAddDays(endDate, -HistoricalDays);


var params = {
	oldestFirst: false /* BOOLEAN */,
	maxItems: undefined /* NUMBER */,
	endDate: endDate /* DATETIME */,
	query: undefined /* QUERY */,
	name: undefined /* THINGNAME */,
	startDate: startDate /* DATETIME */
};

// result: INFOTABLE dataShape: AlertHistory
var alerts = Resources["AlertFunctions"].QueryAlertHistory(params);

for(var x = 0; x < alerts.rows.length; x++)
{
    var row = alerts.rows[x];
    var alertType = row.alertType;
    var propertyName = row.sourceProperty;
    var alertName = row.name;
    var thingName = row.source;
    
    var params = {
        alertType: alertType /* STRING */,
        propertyName: propertyName /* STRING */,
        alertName: alertName /* STRING */,
        thingName: thingName /* STRING */
    };

    // result: STRING
    var recipientsString = Resources["PTC.Factory.AlertMonitorUtilities"].InitializeRecipients(params);
    logger.error(recipientsString);
    
    var params = {
        recipientInfoTable: recipientsString /* STRING */,
        sortQuery: undefined /* QUERY */
    };

    // result: INFOTABLE dataShape: PTC.SCA.Common.Alert.RecipientDataShape
    var recipientsTable = Resources["PTC.Factory.AlertMonitorUtilities"].GetRecipients(params);

    var query = {
      "filters": {
        "fieldName": "userOrGroupName",
        "type": "LIKE",
        "value": "**"+UserId+"*"
      }
    };
    
    var params = {
        t: recipientsTable /* INFOTABLE */,
        query: query /* QUERY */
    };

    // result: INFOTABLE
    var recipientFiltered = Resources["InfoTableFunctions"].Query(params);
    
    if(recipientFiltered.rows.length == 0)
    {
        alerts.Delete(row);
    }
}

result = alerts;


]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="RetrieveConfiguredAlertsByAssetId"><ConfigurationTables><ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[var params = {
	infoTableName : "InfoTable",
	dataShapeName : "DS_Alert_Information"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(AlertInformation)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

for(var i = 0; i < AssetInfo.array.length; i++) 
{
    var obj = AssetInfo.array[i];

    var assetId = obj.assetId;
    var lineId = obj.lineId;
    var lineName = obj.LineName;
    
    var params = {
        network: lineId+"_"+lineName /* STRING */
    };
    // result: BOOLEAN
    var isInNetwork = Things[assetId].IsInNetwork(params);

    if(isInNetwork)
    {
        var params = {
            query: undefined /* QUERY */,
            thingTemplateName: Things[assetId].thingTemplate /* STRING */,
            thingId: assetId /* STRING */,
            sortQuery: undefined /* QUERY */
        };

        // result: INFOTABLE dataShape: PTC.Factory.AllAlertsByThingDataShape
        var alerts = Resources["PTC.Factory.AlertMonitorUtilities"].GetAlertbyThingId(params);

        for(var x = 0; x < alerts.rows.length; x++)
        {
            var row = alerts.rows[x];

            var newEntry = new Object();
            newEntry.AlertDescription = row.Description; // STRING
            newEntry.AlertId = row.Id; // STRING
            newEntry.EqualityCondition = row.AlertType; // STRING
            newEntry.AlertName = row.Name; // STRING
            newEntry.Value = row.AlertValue; // STRING
            newEntry.Property = row.PropertyName; // STRING
            newEntry.AssetId = row.ThingName; //STRING
            result.AddRow(newEntry);
        }
    }
}

var params = {
	table: result /* INFOTABLE */
};

// result: JSON
var result = Resources["InfoTableFunctions"].ToJSON(params);




//var params = {
//	infoTableName : "InfoTable",
//	dataShapeName : "DS_Alert_Information"
//};
//
//// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(AlertInformation)
//var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
//
//// AlertInformation entry object
//var newEntry = new Object();
//newEntry.AlertDescription = "Core Temperature High"; // STRING
//newEntry.AlertId = generateGUID(); // STRING
//newEntry.EqualityCondition = ">"; // STRING
//newEntry.AlertName = "Temperature High"; // STRING
//newEntry.Value = "25"; // STRING
//newEntry.Property = "CoreTemp"; // STRING
//result.AddRow(newEntry);
//
//var newEntry = new Object();
//newEntry.AlertDescription = "Core Temperature Low"; // STRING
//newEntry.AlertId = generateGUID(); // STRING
//newEntry.EqualityCondition = "<"; // STRING
//newEntry.AlertName = "Temperature Low"; // STRING
//newEntry.Value = "10"; // STRING
//newEntry.Property = "CoreTemp"; // STRING
//result.AddRow(newEntry);
//
//
//
//var params = {
//	table: result /* INFOTABLE */
//};
//
//// result: JSON
//var result = Resources["InfoTableFunctions"].ToJSON(params);]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="RetrieveConfiguredAlertsByLineId"><ConfigurationTables><ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[var params = {
	infoTableName : "InfoTable",
	dataShapeName : "DS_Alert_Information"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(AlertInformation)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

for(var i = 0; i < LineInfo.array.length; i++) 
{
    var obj = LineInfo.array[i];

    var lineId = obj.lineId;
    var lineName = obj.LineName;
    
    var params = {
        maxDepth: undefined /* NUMBER */
    };

    // result: INFOTABLE dataShape: NetworkConnection
    var connections = Networks[lineId+"_"+lineName].GetNetworkConnections(params);

	for(var j = 0; j < connections.rows.length; j++)
    {
        var row = connections.rows[j];
        var assetId = row.to;

        var params = {
            query: undefined /* QUERY */,
            thingTemplateName: Things[assetId].thingTemplate /* STRING */,
            thingId: assetId /* STRING */,
            sortQuery: undefined /* QUERY */
        };

        // result: INFOTABLE dataShape: PTC.Factory.AllAlertsByThingDataShape
        var alerts = Resources["PTC.Factory.AlertMonitorUtilities"].GetAlertbyThingId(params);

        for(var x = 0; x < alerts.rows.length; x++)
        {
            var alertrow = alerts.rows[x];

            var newEntry = new Object();
            newEntry.AlertDescription = alertrow.Description;            // STRING
            newEntry.AlertId = alertrow.Id+"--"+lineId+"--"+lineName;            // STRING
            newEntry.EqualityCondition = alertrow.AlertType;            // STRING
            newEntry.AlertName = alertrow.Name;            // STRING
            newEntry.Value = alertrow.AlertValue;            // STRING
            newEntry.Property = alertrow.PropertyName;            // STRING
            newEntry.AssetId = alertrow.ThingName;            //STRING
            result.AddRow(newEntry);
        }
    }
}

var params = {
	table: result /* INFOTABLE */
};

// result: JSON
var result = Resources["InfoTableFunctions"].ToJSON(params);





// AlertInformation entry object
//var newEntry = new Object();
//newEntry.AlertDescription = "Vaccuum Pressure High"; // STRING
//newEntry.AlertId = generateGUID(); // STRING
//newEntry.EqualityCondition = ">"; // STRING
//newEntry.AlertName = "Pressure High"; // STRING
//newEntry.Value = "50"; // STRING
//newEntry.Property = "VaccuumPressure"; // STRING
//result.AddRow(newEntry);
//
//var newEntry = new Object();
//newEntry.AlertDescription = "Vaccuum Pressure Low"; // STRING
//newEntry.AlertId = generateGUID(); // STRING
//newEntry.EqualityCondition = "<"; // STRING
//newEntry.AlertName = "Pressure Low"; // STRING
//newEntry.Value = "10"; // STRING
//newEntry.Property = "VaccuumPressure"; // STRING
//result.AddRow(newEntry);
//
//
//
//var params = {
//	table: result /* INFOTABLE */
//};
//
//// result: JSON
//var result = Resources["InfoTableFunctions"].ToJSON(params);]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="SubscribeToAlertByUserIdAssetId"><ConfigurationTables><ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[for(var i = 0; i < SubscriptionInfo.array.length; i++) 
{
    var obj = SubscriptionInfo.array[i];

    var userId = obj.userId;
    var alertId = obj.alertId;
    var assetId = obj.assetId;
    
    var query = {
      "filters": {
        "fieldName": "Id",
        "type": "EQ",
        "value": alertId
      }
    };

    var params = {
        query: query /* QUERY */,
        thingTemplateName: Things[assetId].thingTemplate /* STRING */,
        thingId: assetId /* STRING */,
        sortQuery: undefined /* QUERY */
    };

    // result: INFOTABLE dataShape: PTC.Factory.AllAlertsByThingDataShape
    var alertInfo = Resources["PTC.Factory.AlertMonitorUtilities"].GetAlertbyThingId(params);
    
    var thingName = alertInfo.ThingName;
    var propertyName = alertInfo.PropertyName;
    var alertName = alertInfo.Name;
    var alertType = alertInfo.AlertType;
    var baseType = alertInfo.BaseType;
    var description = alertInfo.Description;
    var value = alertInfo.AlertValue;
      
    var params = {
        alertType: alertType /* STRING */,
        propertyName: propertyName /* STRING */,
        alertName: alertName /* STRING */,
        thingName: thingName /* STRING */
    };

    // result: STRING
    var initialRecipientListString = Resources["PTC.Factory.AlertMonitorUtilities"].InitializeRecipients(params);
    
    var params = {
        recipientInfoTable: initialRecipientListString /* STRING */,
        sortQuery: undefined /* QUERY */
    };
    // result: INFOTABLE dataShape: PTC.SCA.Common.Alert.RecipientDataShape
    var initialRecipientList = Resources["PTC.Factory.AlertMonitorUtilities"].GetRecipients(params);

    // PTC.SCA.Common.Alert.RecipientDataShape entry object
    var newEntry = new Object();
    newEntry.userOrGroupType = ""; // STRING - isPrimaryKey = true
    newEntry.mobilePhoneNumber = Users[userId].workPhone; // STRING
    newEntry.emailAddress = Users[userId].emailAddress; // STRING
    newEntry.userOrGroupName = Users[userId].firstName + " " + Users[userId].lastName + " (" + userId + ")"; // STRING - isPrimaryKey = true
    initialRecipientList.AddRow(newEntry);
	
    var params = {
        alertType: alertType /* STRING */,
        propertyName: propertyName /* STRING */,
        alertName: alertName /* STRING */,
        BaseType: baseType /* STRING */,
        recipients: initialRecipientList /* INFOTABLE */,
        originalAlertName: alertName /* STRING */,
        thingName: thingName /* STRING */,
        alertDescription: description /* STRING */,
        value: value /* STRING */
    };

    // no return
    Resources["PTC.Factory.AlertMonitorUtilities"].UpdateAlert(params);
}]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="SubscribeToAlertByUserIdLineId"><ConfigurationTables><ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[for(var i = 0; i < SubscriptionInfo.array.length; i++) 
{
    var obj = SubscriptionInfo.array[i];

    var userId = obj.userId;
    var alertIdFull = obj.alertId;
    var lineId = obj.lineId;
    
    var alertIdSplit = alertIdFull.split('--');
    var alertIdActual = alertIdSplit[0]+"--"+alertIdSplit[1]+"--"+alertIdSplit[2];
    var assetId = alertIdSplit[0];
    var lineName = alertIdSplit[4];
    var networkName = lineId+"_"+lineName;
    
    var params = {
        network: networkName /* STRING */
    };
    // result: BOOLEAN
    var isInNetwork = Things[assetId].IsInNetwork(params);

	if(isInNetwork)
    {
        var query = {
          "filters": {
            "fieldName": "Id",
            "type": "EQ",
            "value": alertIdActual
          }
        };

        var params = {
            query: query /* QUERY */,
            thingTemplateName: Things[assetId].thingTemplate /* STRING */,
            thingId: assetId /* STRING */,
            sortQuery: undefined /* QUERY */
        };

        // result: INFOTABLE dataShape: PTC.Factory.AllAlertsByThingDataShape
        var alertInfo = Resources["PTC.Factory.AlertMonitorUtilities"].GetAlertbyThingId(params);

        var thingName = alertInfo.ThingName;
        var propertyName = alertInfo.PropertyName;
        var alertName = alertInfo.Name;
        var alertType = alertInfo.AlertType;
        var baseType = alertInfo.BaseType;
        var description = alertInfo.Description;
        var value = alertInfo.AlertValue;

        var params = {
            alertType: alertType /* STRING */,
            propertyName: propertyName /* STRING */,
            alertName: alertName /* STRING */,
            thingName: thingName /* STRING */
        };

        // result: STRING
        var initialRecipientListString = Resources["PTC.Factory.AlertMonitorUtilities"].InitializeRecipients(params);

        var params = {
            recipientInfoTable: initialRecipientListString /* STRING */,
            sortQuery: undefined /* QUERY */
        };
        // result: INFOTABLE dataShape: PTC.SCA.Common.Alert.RecipientDataShape
        var initialRecipientList = Resources["PTC.Factory.AlertMonitorUtilities"].GetRecipients(params);

        // PTC.SCA.Common.Alert.RecipientDataShape entry object
        var newEntry = new Object();
        newEntry.userOrGroupType = ""; // STRING - isPrimaryKey = true
        newEntry.mobilePhoneNumber = Users[userId].workPhone; // STRING
        newEntry.emailAddress = Users[userId].emailAddress; // STRING
        newEntry.userOrGroupName = Users[userId].firstName + " " + Users[userId].lastName + " (" + userId + ")"; // STRING - isPrimaryKey = true
        initialRecipientList.AddRow(newEntry);

        var params = {
            alertType: alertType /* STRING */,
            propertyName: propertyName /* STRING */,
            alertName: alertName /* STRING */,
            BaseType: baseType /* STRING */,
            recipients: initialRecipientList /* INFOTABLE */,
            originalAlertName: alertName /* STRING */,
            thingName: thingName /* STRING */,
            alertDescription: description /* STRING */,
            value: value /* STRING */
        };

        // no return
        Resources["PTC.Factory.AlertMonitorUtilities"].UpdateAlert(params);
    }
}]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="UnsubscribeFromAlertByUserIdAssetId"><ConfigurationTables><ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[for(var i = 0; i < SubscriptionInfo.array.length; i++) 
{
    var obj = SubscriptionInfo.array[i];

    var userId = obj.userId;
    var alertId = obj.alertId;
    var assetId = obj.assetId;
    
    var query = {
      "filters": {
        "fieldName": "Id",
        "type": "EQ",
        "value": alertId
      }
    };

    var params = {
        query: query /* QUERY */,
        thingTemplateName: Things[assetId].thingTemplate /* STRING */,
        thingId: assetId /* STRING */,
        sortQuery: undefined /* QUERY */
    };

    // result: INFOTABLE dataShape: PTC.Factory.AllAlertsByThingDataShape
    var alertInfo = Resources["PTC.Factory.AlertMonitorUtilities"].GetAlertbyThingId(params);
    
    var thingName = alertInfo.ThingName;
    var propertyName = alertInfo.PropertyName;
    var alertName = alertInfo.Name;
    var alertType = alertInfo.AlertType;
    var baseType = alertInfo.BaseType;
    var description = alertInfo.Description;
    var value = alertInfo.AlertValue;
      
    var params = {
        alertType: alertType /* STRING */,
        propertyName: propertyName /* STRING */,
        alertName: alertName /* STRING */,
        thingName: thingName /* STRING */
    };

    // result: STRING
    var initialRecipientListString = Resources["PTC.Factory.AlertMonitorUtilities"].InitializeRecipients(params);
    
    var params = {
        recipientInfoTable: initialRecipientListString /* STRING */,
        sortQuery: undefined /* QUERY */
    };

    // result: INFOTABLE dataShape: PTC.SCA.Common.Alert.RecipientDataShape
    var initialRecipientList = Resources["PTC.Factory.AlertMonitorUtilities"].GetRecipients(params);

    // PTC.SCA.Common.Alert.RecipientDataShape entry object
    var newEntry = new Object();
    newEntry.userOrGroupType = ""; // STRING - isPrimaryKey = true
    newEntry.mobilePhoneNumber = ""; // STRING
    newEntry.emailAddress = Users[userId].emailAddress; // STRING
    newEntry.userOrGroupName = Users[userId].firstName + " " + Users[userId].lastName + " (" + userId + ")"; // STRING - isPrimaryKey = true

    initialRecipientList.Delete(newEntry);

	var params = {
        alertType: alertType /* STRING */,
        propertyName: propertyName /* STRING */,
        alertName: alertName /* STRING */,
        BaseType: baseType /* STRING */,
        recipients: initialRecipientList /* INFOTABLE */,
        originalAlertName: alertName /* STRING */,
        thingName: thingName /* STRING */,
        alertDescription: description /* STRING */,
        value: value /* STRING */
    };

    // no return
    Resources["PTC.Factory.AlertMonitorUtilities"].UpdateAlert(params);
}]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="UnsubscribeFromAlertByUserIdLineId"><ConfigurationTables><ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[for(var i = 0; i < SubscriptionInfo.array.length; i++) 
{
    var obj = SubscriptionInfo.array[i];

    var userId = obj.userId;
    var alertIdFull = obj.alertId;
    var lineId = obj.lineId;
    
    var alertIdSplit = alertIdFull.split('--');
    var alertIdActual = alertIdSplit[0]+"--"+alertIdSplit[1]+"--"+alertIdSplit[2];
    var assetId = alertIdSplit[0];
    var lineName = alertIdSplit[4];
    var networkName = lineId+"_"+lineName;
    
    var params = {
        network: networkName /* STRING */
    };
    // result: BOOLEAN
    var isInNetwork = Things[assetId].IsInNetwork(params);

	if(isInNetwork)
    {
        var query = {
          "filters": {
            "fieldName": "Id",
            "type": "EQ",
            "value": alertIdActual
          }
        };

        var params = {
            query: query /* QUERY */,
            thingTemplateName: Things[assetId].thingTemplate /* STRING */,
            thingId: assetId /* STRING */,
            sortQuery: undefined /* QUERY */
        };

        // result: INFOTABLE dataShape: PTC.Factory.AllAlertsByThingDataShape
        var alertInfo = Resources["PTC.Factory.AlertMonitorUtilities"].GetAlertbyThingId(params);

        var thingName = alertInfo.ThingName;
        var propertyName = alertInfo.PropertyName;
        var alertName = alertInfo.Name;
        var alertType = alertInfo.AlertType;
        var baseType = alertInfo.BaseType;
        var description = alertInfo.Description;
        var value = alertInfo.AlertValue;

        var params = {
            alertType: alertType /* STRING */,
            propertyName: propertyName /* STRING */,
            alertName: alertName /* STRING */,
            thingName: thingName /* STRING */
        };

        // result: STRING
        var initialRecipientListString = Resources["PTC.Factory.AlertMonitorUtilities"].InitializeRecipients(params);

        var params = {
            recipientInfoTable: initialRecipientListString /* STRING */,
            sortQuery: undefined /* QUERY */
        };

        // result: INFOTABLE dataShape: PTC.SCA.Common.Alert.RecipientDataShape
        var initialRecipientList = Resources["PTC.Factory.AlertMonitorUtilities"].GetRecipients(params);

        // PTC.SCA.Common.Alert.RecipientDataShape entry object
        var newEntry = new Object();
        newEntry.userOrGroupType = ""; // STRING - isPrimaryKey = true
        newEntry.mobilePhoneNumber = ""; // STRING
        newEntry.emailAddress = Users[userId].emailAddress; // STRING
        newEntry.userOrGroupName = Users[userId].firstName + " " + Users[userId].lastName + " (" + userId + ")"; // STRING - isPrimaryKey = true

        initialRecipientList.Delete(newEntry);

        var params = {
            alertType: alertType /* STRING */,
            propertyName: propertyName /* STRING */,
            alertName: alertName /* STRING */,
            BaseType: baseType /* STRING */,
            recipients: initialRecipientList /* INFOTABLE */,
            originalAlertName: alertName /* STRING */,
            thingName: thingName /* STRING */,
            alertDescription: description /* STRING */,
            value: value /* STRING */
        };

        // no return
        Resources["PTC.Factory.AlertMonitorUtilities"].UpdateAlert(params);
    }
}]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></ServiceImplementations><Subscriptions/></ThingShape><PropertyBindings/><RemotePropertyBindings/><RemoteServiceBindings/><RemoteEventBindings/><AlertConfigurations/><ImplementedShapes/><ThingProperties/><ConfigurationChanges><ConfigurationChange changeAction="CREATE" changeReason="header : name : updated&#10;" timestamp="2017-10-24T18:14:03.233Z" user="p54284"/><ConfigurationChange changeAction="MODIFY" changeReason="services : NetworkTest : removed, RetrieveAllAlertsByUserId : Code Updated, Output Updated&#10;" timestamp="2017-10-24T20:02:22.359Z" user="p54284"/><ConfigurationChange changeAction="MODIFY" changeReason="" timestamp="2017-10-24T20:04:02.030Z" user="p54284"/><ConfigurationChange changeAction="MODIFY" changeReason="" timestamp="2017-10-24T20:05:01.095Z" user="p54284"/><ConfigurationChange changeAction="MODIFY" changeReason="" timestamp="2017-10-24T20:08:01.560Z" user="p54284"/><ConfigurationChange changeAction="MODIFY" changeReason="services : RetrieveAllAlertsByUserId : Output Updated&#10;" timestamp="2017-10-24T20:08:14.537Z" user="p54284"/></ConfigurationChanges></Thing></Things></Entities>