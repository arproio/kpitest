<?xml version="1.0" encoding="UTF-8" standalone="no"?><Entities build="b46" majorVersion="8" minorVersion="0" modelPersistenceProviderPackage="PostgresPersistenceProviderPackage" revision="4" schemaVersion="1000"><ThingTemplates><ThingTemplate baseThingTemplate="RemoteThingWithTunnelsAndFileTransfer" description="New Thing Template used for Value Stream asset KPI's" documentationContent="" effectiveThingPackage="RemoteThingWithTunnelsAndFileTransfer" homeMashup="" lastModifiedDate="2017-10-27T20:01:45.247Z" name="TT_VS_RTTFT_VS95TS_V_0_0_1" projectName="CogniPro" tags="cogniProTag:DeshengSimExport" thingPackage="" valueStream="VS_VS95TS"><Owner name="Jennifer" type="User"/><avatar/><DesignTimePermissions><Create/><Read/><Update/><Delete/><Metadata/></DesignTimePermissions><RunTimePermissions/><VisibilityPermissions><Visibility/></VisibilityPermissions><ConfigurationTables><ConfigurationTable description="Tunneling Destinations" isMultiRow="true" name="Tunnels" ordinal="1"><DataShape><FieldDefinitions><FieldDefinition aspect.defaultValue="" aspect.friendlyName="Application Path" baseType="STRING" description="Location of the client app that will use this tunnel" name="appUri" ordinal="5"/><FieldDefinition aspect.defaultValue="" aspect.friendlyName="Description" baseType="STRING" description="A description of the tunnel" name="description" ordinal="3"/><FieldDefinition aspect.defaultValue="127.0.0.1" aspect.friendlyName="Host" baseType="STRING" description="Host or IP that this tunnel will connect to at the edge" name="host" ordinal="1"/><FieldDefinition aspect.defaultValue="vnc" aspect.friendlyName="Name" baseType="STRING" description="Name of the tunnel" name="name" ordinal="0"/><FieldDefinition aspect.defaultValue="1.0" aspect.friendlyName="Number of Connects" baseType="NUMBER" description="The number of connections required to establish this tunnel" name="numConnects" ordinal="4"/><FieldDefinition aspect.defaultValue="5900.0" aspect.friendlyName="Port" baseType="NUMBER" description="Port that this tunnel will connect to at the edge" name="port" ordinal="2"/><FieldDefinition aspect.defaultValue="tcp" aspect.friendlyName="Protocol" baseType="STRING" description="The protocol used over this tunnel" name="proto" ordinal="6"/></FieldDefinitions></DataShape><Rows/></ConfigurationTable><ConfigurationTable description="General Settings" isMultiRow="false" name="TunnelSettings" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition aspect.friendlyName="Enable Tunneling" aspect.isNullable="true" baseType="BOOLEAN" description="Enable tunneling" name="enableTunneling" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row/></Rows></ConfigurationTable></ConfigurationTables><PropertyBindings/><RemotePropertyBindings><RemotePropertyBinding foldType="NONE" name="state_alarm" pushThreshold="0.0" pushType="ALWAYS" sourceName="state_alarm" timeout="0"/><RemotePropertyBinding foldType="NONE" name="state_cleaning" pushThreshold="0.0" pushType="ALWAYS" sourceName="state_cleaning" timeout="0"/><RemotePropertyBinding foldType="NONE" name="state_downstreamRTR" pushThreshold="0.0" pushType="ALWAYS" sourceName="state_downstreamRTR" timeout="0"/><RemotePropertyBinding foldType="NONE" name="state_leaktest" pushThreshold="0.0" pushType="ALWAYS" sourceName="state_leaktest" timeout="0"/><RemotePropertyBinding foldType="NONE" name="state_maintenance" pushThreshold="0.0" pushType="ALWAYS" sourceName="state_maintenance" timeout="0"/><RemotePropertyBinding foldType="NONE" name="state_plcup" pushThreshold="0.0" pushType="ALWAYS" sourceName="state_plcup" timeout="0"/><RemotePropertyBinding foldType="NONE" name="state_preemptivetest" pushThreshold="0.0" pushType="ALWAYS" sourceName="state_preemptivetest" timeout="0"/><RemotePropertyBinding foldType="NONE" name="state_production" pushThreshold="0.0" pushType="ALWAYS" sourceName="state_production" timeout="0"/><RemotePropertyBinding foldType="NONE" name="state_run" pushThreshold="0.0" pushType="ALWAYS" sourceName="state_run" timeout="0"/><RemotePropertyBinding foldType="NONE" name="state_stop" pushThreshold="0.0" pushType="ALWAYS" sourceName="state_stop" timeout="0"/><RemotePropertyBinding foldType="NONE" name="state_upstreamRTS" pushThreshold="0.0" pushType="ALWAYS" sourceName="state_upstreamRTS" timeout="0"/></RemotePropertyBindings><RemoteServiceBindings/><RemoteEventBindings/><AlertConfigurations><AlertDefinitions name="plcTimeStamp"/><AlertDefinitions name="postgresSensorDaTable"/><AlertDefinitions name="shiftNumber"/><AlertDefinitions name="shiftStrtTime"/><AlertDefinitions name="state_alarm"/><AlertDefinitions name="state_cleaning"/><AlertDefinitions name="state_downstreamRTR"/><AlertDefinitions name="state_leaktest"/><AlertDefinitions name="state_maintenance"/><AlertDefinitions name="state_plcup"/><AlertDefinitions name="state_preemptivetest"/><AlertDefinitions name="state_production"/><AlertDefinitions name="state_run"/><AlertDefinitions name="state_stop"/><AlertDefinitions name="state_upstreamRTS"/></AlertConfigurations><ThingShape><PropertyDefinitions><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isLogged="true" aspect.isPersistent="true" aspect.isReadOnly="false" baseType="STRING" category="" description="" isLocalOnly="false" name="plcTimeStamp" ordinal="15"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="NEVER" aspect.defaultValue=" cognipro.cognipro_vs95ts_sensordata" aspect.isLogged="true" aspect.isPersistent="true" aspect.isReadOnly="true" baseType="STRING" category="" description="" isLocalOnly="false" name="postgresSensorDaTable" ordinal="14"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isLogged="true" aspect.isPersistent="true" aspect.isReadOnly="false" baseType="STRING" category="" description="" isLocalOnly="false" name="shiftNumber" ordinal="12"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isLogged="true" aspect.isPersistent="true" aspect.isReadOnly="false" baseType="STRING" category="" description="" isLocalOnly="false" name="shiftStrtTime" ordinal="13"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isLogged="true" aspect.isPersistent="false" aspect.isReadOnly="true" baseType="BOOLEAN" category="" description="General Alarm state active" isLocalOnly="false" name="state_alarm" ordinal="4"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isLogged="true" aspect.isPersistent="false" aspect.isReadOnly="true" baseType="BOOLEAN" category="" description="Cleaning Mode selected" isLocalOnly="false" name="state_cleaning" ordinal="7"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isLogged="true" aspect.isPersistent="false" aspect.isReadOnly="true" baseType="BOOLEAN" category="" description="Functional Interfaces Downstream (RTR)" isLocalOnly="false" name="state_downstreamRTR" ordinal="10"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isLogged="true" aspect.isPersistent="false" aspect.isReadOnly="true" baseType="BOOLEAN" category="" description="Leak test selected" isLocalOnly="false" name="state_leaktest" ordinal="8"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isLogged="true" aspect.isPersistent="false" aspect.isReadOnly="true" baseType="BOOLEAN" category="" description="Maintenance Mode selected" isLocalOnly="false" name="state_maintenance" ordinal="6"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isLogged="true" aspect.isPersistent="false" aspect.isReadOnly="true" baseType="BOOLEAN" category="" description="Machine Up (PLC up)" isLocalOnly="false" name="state_plcup" ordinal="1"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isLogged="true" aspect.isPersistent="false" aspect.isReadOnly="true" baseType="BOOLEAN" category="" description="Preemptive maintenance test selected" isLocalOnly="false" name="state_preemptivetest" ordinal="9"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isLogged="true" aspect.isPersistent="false" aspect.isReadOnly="true" baseType="BOOLEAN" category="" description="Production Mode selected" isLocalOnly="false" name="state_production" ordinal="5"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isLogged="true" aspect.isPersistent="false" aspect.isReadOnly="true" baseType="BOOLEAN" category="" description="Machine Running" isLocalOnly="false" name="state_run" ordinal="3"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isLogged="true" aspect.isPersistent="false" aspect.isReadOnly="true" baseType="BOOLEAN" category="" description="Machine Stopped " isLocalOnly="false" name="state_stop" ordinal="2"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isLogged="true" aspect.isPersistent="false" aspect.isReadOnly="true" baseType="BOOLEAN" category="" description="Functional Interfaces Upstream (RTS)" isLocalOnly="false" name="state_upstreamRTS" ordinal="11"/></PropertyDefinitions><ServiceDefinitions><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetLoggedInfoTableValues"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions/></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="insertDBRecord"><ResultType baseType="INFOTABLE" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition baseType="INTEGER" description="" name="alarm_02" ordinal="48"/><FieldDefinition baseType="INTEGER" description="" name="alarm_03" ordinal="50"/><FieldDefinition baseType="INTEGER" description="" name="alarm_04" ordinal="44"/><FieldDefinition baseType="INTEGER" description="" name="alarm_05" ordinal="46"/><FieldDefinition baseType="INTEGER" description="" name="alarm_08" ordinal="52"/><FieldDefinition baseType="INTEGER" description="" name="alarm_20" ordinal="25"/><FieldDefinition baseType="INTEGER" description="" name="alarm_24" ordinal="2"/><FieldDefinition baseType="INTEGER" description="" name="config_booster" ordinal="6"/><FieldDefinition baseType="INTEGER" description="" name="config_centralvac" ordinal="17"/><FieldDefinition baseType="INTEGER" description="" name="config_cognipro" ordinal="14"/><FieldDefinition baseType="INTEGER" description="" name="config_exitconveyor" ordinal="11"/><FieldDefinition baseType="INTEGER" description="" name="config_exitsynchro" ordinal="70"/><FieldDefinition baseType="INTEGER" description="" name="config_lineversion" ordinal="76"/><FieldDefinition baseType="STRING" description="" name="config_plc_prg" ordinal="39"/><FieldDefinition baseType="INTEGER" description="" name="config_preemptivetest" ordinal="31"/><FieldDefinition baseType="INTEGER" description="" name="config_productdirection" ordinal="30"/><FieldDefinition baseType="INTEGER" description="" name="config_profilbelt" ordinal="12"/><FieldDefinition baseType="INTEGER" description="" name="config_sealheightadj" ordinal="24"/><FieldDefinition baseType="INTEGER" description="" name="config_trimremovemonior" ordinal="43"/><FieldDefinition baseType="STRING" description="" name="machineID" ordinal="57"/><FieldDefinition baseType="INTEGER" description="" name="opmsg_bagdetectsensorleft" ordinal="7"/><FieldDefinition baseType="INTEGER" description="" name="opmsg_bagdetectsensorright" ordinal="66"/><FieldDefinition baseType="INTEGER" description="" name="opmsg_beltspeedhigh" ordinal="83"/><FieldDefinition baseType="INTEGER" description="" name="opmsg_beltspeedlow" ordinal="62"/><FieldDefinition baseType="INTEGER" description="" name="opmsg_beltspeedmed" ordinal="51"/><FieldDefinition baseType="STRING" description="" name="param_cycletimestamp" ordinal="90"/><FieldDefinition baseType="INTEGER" description="" name="param_leakholdactive" ordinal="21"/><FieldDefinition baseType="INTEGER" description="" name="param_leakmeasured" ordinal="35"/><FieldDefinition baseType="INTEGER" description="" name="param_leakpumpstate" ordinal="49"/><FieldDefinition baseType="INTEGER" description="" name="param_leakscantime" ordinal="79"/><FieldDefinition baseType="INTEGER" description="" name="param_leaktestsource" ordinal="75"/><FieldDefinition baseType="INTEGER" description="" name="param_lifetimecycles" ordinal="15"/><FieldDefinition baseType="INTEGER" description="" name="param_operationhours" ordinal="37"/><FieldDefinition baseType="INTEGER" description="" name="param_prodcountleft" ordinal="40"/><FieldDefinition baseType="INTEGER" description="" name="param_prodcountright" ordinal="42"/><FieldDefinition baseType="INTEGER" description="" name="param_prodcounttotal" ordinal="81"/><FieldDefinition baseType="INTEGER" description="" name="param_productloaddone" ordinal="69"/><FieldDefinition baseType="INTEGER" description="" name="param_pumphours" ordinal="54"/><FieldDefinition baseType="INTEGER" description="" name="param_speedCPM" ordinal="60"/><FieldDefinition baseType="INTEGER" description="" name="param_speedcpm" ordinal="87"/><FieldDefinition baseType="INTEGER" description="" name="param_utillizationleft" ordinal="10"/><FieldDefinition baseType="INTEGER" description="" name="param_utillizationright" ordinal="33"/><FieldDefinition baseType="INTEGER" description="" name="param_utillizationtotal" ordinal="68"/><FieldDefinition baseType="INTEGER" description="" name="param_vac" ordinal="19"/><FieldDefinition baseType="INTEGER" description="" name="param_vacabort" ordinal="23"/><FieldDefinition baseType="INTEGER" description="" name="param_vaccomplete" ordinal="20"/><FieldDefinition baseType="INTEGER" description="" name="param_vaccycletime" ordinal="55"/><FieldDefinition baseType="INTEGER" description="" name="param_vacreached" ordinal="8"/><FieldDefinition baseType="INTEGER" description="" name="param_vactimeprogress" ordinal="80"/><FieldDefinition baseType="STRING" description="" name="plcTimeStamp" ordinal="65"/><FieldDefinition baseType="INTEGER" description="" name="rAirflow_BasePosition" ordinal="56"/><FieldDefinition baseType="INTEGER" description="" name="rAirflow_Chambercylinders" ordinal="61"/><FieldDefinition baseType="INTEGER" description="" name="rAirflow_Precutcylinders" ordinal="32"/><FieldDefinition baseType="INTEGER" description="" name="rAirflow_ReentryValve" ordinal="64"/><FieldDefinition baseType="INTEGER" description="" name="rAirflow_Sealing" ordinal="77"/><FieldDefinition baseType="INTEGER" description="" name="rAirflow_Tensioning" ordinal="27"/><FieldDefinition baseType="INTEGER" description="" name="rAirflow_VacuumValve" ordinal="5"/><FieldDefinition baseType="INTEGER" description="" name="recipe_cooltime" ordinal="1"/><FieldDefinition baseType="INTEGER" description="" name="recipe_lidopendelaytime" ordinal="29"/><FieldDefinition baseType="STRING" description="" name="recipe_name" ordinal="41"/><FieldDefinition baseType="INTEGER" description="" name="recipe_prereentrytime" ordinal="3"/><FieldDefinition baseType="INTEGER" description="" name="recipe_productdetectionoffdelay" ordinal="4"/><FieldDefinition baseType="INTEGER" description="" name="recipe_productdetectionondelay" ordinal="89"/><FieldDefinition baseType="INTEGER" description="" name="recipe_sealtimeleft" ordinal="73"/><FieldDefinition baseType="INTEGER" description="" name="recipe_sealtimeright" ordinal="85"/><FieldDefinition baseType="INTEGER" description="" name="recipe_ultravacdelaytime" ordinal="18"/><FieldDefinition baseType="INTEGER" description="" name="recipe_ultravactime" ordinal="58"/><FieldDefinition baseType="INTEGER" description="" name="recipe_vacholdtime" ordinal="86"/><FieldDefinition baseType="INTEGER" description="" name="recipe_vacmode" ordinal="82"/><FieldDefinition baseType="INTEGER" description="" name="recipe_vacprolongtime" ordinal="53"/><FieldDefinition baseType="INTEGER" description="" name="recipe_vactarget" ordinal="16"/><FieldDefinition baseType="STRING" description="" name="recipe_vactime" ordinal="45"/><FieldDefinition baseType="INTEGER" description="" name="recipe_vcsdeltatime" ordinal="71"/><FieldDefinition baseType="INTEGER" description="" name="rLeak_VacuumChamber_NoAction" ordinal="72"/><FieldDefinition baseType="INTEGER" description="" name="rLeak_VacuumChamber_Precut" ordinal="67"/><FieldDefinition baseType="INTEGER" description="" name="rLeak_VacuumChamber_Sealing" ordinal="36"/><FieldDefinition baseType="INTEGER" description="" name="rLeak_VacuumPumpSide" ordinal="34"/><FieldDefinition baseType="INTEGER" description="" name="state_alarm" ordinal="59"/><FieldDefinition baseType="INTEGER" description="" name="state_cleaning" ordinal="9"/><FieldDefinition baseType="INTEGER" description="" name="state_downstreamRTR" ordinal="84"/><FieldDefinition baseType="INTEGER" description="" name="state_leaktest" ordinal="28"/><FieldDefinition baseType="INTEGER" description="" name="state_maintenance" ordinal="78"/><FieldDefinition baseType="INTEGER" description="" name="state_plcup" ordinal="63"/><FieldDefinition baseType="INTEGER" description="" name="state_preemptivetest" ordinal="38"/><FieldDefinition baseType="INTEGER" description="" name="state_production" ordinal="74"/><FieldDefinition baseType="INTEGER" description="" name="state_run" ordinal="88"/><FieldDefinition baseType="INTEGER" description="" name="state_stop" ordinal="26"/><FieldDefinition baseType="INTEGER" description="" name="state_upstreamRTS" ordinal="13"/><FieldDefinition baseType="INTEGER" description="" name="tVacuumDrawingTimeSeconds" ordinal="22"/><FieldDefinition baseType="INTEGER" description="" name="tVacuumLeaktestDuration" ordinal="47"/></ParameterDefinitions></ServiceDefinition></ServiceDefinitions><EventDefinitions/><ServiceMappings/><ServiceImplementations><ServiceImplementation description="" handlerName="Script" name="GetLoggedInfoTableValues"><ConfigurationTables><ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code/></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="insertDBRecord"><ConfigurationTables><ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[logger.debug("TT_RTTFT_VS95TS_V_0_0_1  InsertRecordDB - START "+me.name);   
//try{
var currentTime = Date.now();
var formattedTime = dateFormat(currentTime,"yyyy-MM-dd HH:mm:ss.SSS");
var shiftNoparams = {
	plcTime: formattedTime /* STRING */,
	assetID: me.name /* STRING */
};
var shiftNo;
// result: INFOTABLE
var shiftNoResult= Things["SEE_FC_PostGres_Database"].calculateShiftNo(shiftNoparams);
shiftNo = shiftNoResult.sp_vpp_getshiftnumber;
// 
//
//var shiftStartTimeParams = {
//	plcTime: formattedTime /* STRING */,
//	assetID: me.name /* STRING */,
//	sensorTableName: me.postgresSensorDaTable /* STRING */,
//	shiftNo: shiftNo /* STRING */
//};
//
//// result: INFOTABLE
//var shiftstartTimeResult= Things["SEE_FC_PostGres_Database"].calculateShiftStartTime(shiftStartTimeParams);
//me.shiftStrtTime =shiftstartTimeResult.sp_cognipro_calculate_shift_start_time;

// result: INFOTABLE

var params = {
	recipe_cooltime: recipe_cooltime /* INTEGER */,
	alarm_24: alarm_24 /* INTEGER */,
	recipe_prereentrytime: recipe_prereentrytime /* INTEGER */,
	recipe_productdetectionondelay: recipe_productdetectionoffdelay /* INTEGER */,
	rAirflow_VacuumValve: rAirflow_VacuumValve /* INTEGER */,
	config_booster: config_booster /* INTEGER */,
	opmsg_bagdetectsensorleft: opmsg_bagdetectsensorleft /* INTEGER */,
	param_vacreached: param_vacreached /* INTEGER */,
	state_cleaning: state_cleaning /* INTEGER */,
	param_utillizationleft: param_utillizationleft /* INTEGER */,
	config_exitconveyor: config_exitconveyor /* INTEGER */,
	config_profilbelt: config_profilbelt /* INTEGER */,
	state_upstreamRTS: state_upstreamRTS /* INTEGER */,
	config_cognipro: config_cognipro /* INTEGER */,
	param_lifetimecycles: param_lifetimecycles /* INTEGER */,
	recipe_vactarget: recipe_vactarget /* INTEGER */,
	config_centralvac: config_centralvac /* INTEGER */,
	recipe_ultravacdelaytime: recipe_ultravacdelaytime /* INTEGER */,
	param_vac: param_vac /* INTEGER */,
	param_vaccomplete: param_vaccomplete /* INTEGER */,
	param_leakholdactive: param_leakholdactive /* INTEGER */,
	tVacuumDrawingTimeSeconds: tVacuumDrawingTimeSeconds /* INTEGER */,
	param_vacabort: param_vacabort /* INTEGER */,
	config_sealheightadj: config_sealheightadj /* INTEGER */,
	alarm_20: alarm_20 /* INTEGER */,
	state_stop: state_stop /* INTEGER */,
	rAirflow_Tensioning: rAirflow_Tensioning /* INTEGER */,
	state_leaktest: state_leaktest /* INTEGER */,
	recipe_lidopendelaytime: recipe_lidopendelaytime /* INTEGER */,
	config_productdirection: config_productdirection /* INTEGER */,
	config_preemptivetest: config_preemptivetest /* INTEGER */,
	rAirflow_Precutcylinders: rAirflow_Precutcylinders /* INTEGER */,
	param_utillizationright: param_utillizationright /* INTEGER */,
	rLeak_VacuumPumpSide: rLeak_VacuumPumpSide /* INTEGER */,
	param_leakmeasured: param_leakmeasured /* INTEGER */,
	rLeak_VacuumChamber_Sealing: rLeak_VacuumChamber_Sealing /* INTEGER */,
	param_operationhours: param_operationhours /* INTEGER */,
	state_preemptivetest: state_preemptivetest /* INTEGER */,
	config_plc_prg: config_plc_prg /* INTEGER */,
	param_prodcountleft: param_prodcountleft /* INTEGER */,
	recipe_name: recipe_name /* INTEGER */,
	param_prodcountright: param_prodcountright /* INTEGER */,
	config_trimremovemonior: config_trimremovemonior /* INTEGER */,
	alarm_04: alarm_04 /* INTEGER */,
	recipe_vactime: recipe_vactime /* INTEGER */,
	alarm_05: alarm_05 /* INTEGER */,
	tVacuumLeaktestDuration: tVacuumLeaktestDuration /* INTEGER */,
	alarm_02: alarm_02 /* INTEGER */,
	param_leakpumpstate: param_leakpumpstate /* INTEGER */,
	alarm_03: alarm_03 /* INTEGER */,
	opmsg_beltspeedmed: opmsg_beltspeedmed /* INTEGER */,
	alarm_08: alarm_08 /* INTEGER */,
	recipe_vacprolongtime: recipe_vacprolongtime /* INTEGER */,
	param_pumphours: param_pumphours /* INTEGER */,
	param_vaccycletime: param_vaccycletime /* INTEGER */,
	rAirflow_BasePosition: rAirflow_BasePosition /* INTEGER */,
	recipe_productdetectionoffdelay: recipe_productdetectionoffdelay /* INTEGER */,
	machineID: machineID /* STRING */,
	recipe_ultravactime: recipe_ultravactime /* INTEGER */,
	state_alarm: state_alarm /* INTEGER */,
	param_speedCPM: param_speedCPM /* INTEGER */,
	rAirflow_Chambercylinders: rAirflow_Chambercylinders /* INTEGER */,
	opmsg_beltspeedlow: opmsg_beltspeedlow /* INTEGER */,
	state_plcup: state_plcup /* INTEGER */,
	rAirflow_ReentryValve: rAirflow_ReentryValve /* INTEGER */,
	plcTimeStamp:plcTimeStamp /* STRING */,
	opmsg_bagdetectsensorright: opmsg_bagdetectsensorright /* INTEGER */,
	rLeak_VacuumChamber_Precut: rLeak_VacuumChamber_Precut /* INTEGER */,
	param_utillizationtotal: param_utillizationtotal/* INTEGER */,
	param_productloaddone: param_productloaddone /* INTEGER */,
	config_exitsynchro: config_exitsynchro /* INTEGER */,
	recipe_vcsdeltatime: recipe_vcsdeltatime /* INTEGER */,
	rLeak_VacuumChamber_NoAction: rLeak_VacuumChamber_NoAction /* INTEGER */,
	recipe_sealtimeleft: recipe_sealtimeleft /* INTEGER */,
	state_production: state_production /* INTEGER */,
	param_leaktestsource: param_leaktestsource /* INTEGER */,
	config_lineversion: config_lineversion /* INTEGER */,
	rAirflow_Sealing: rAirflow_Sealing /* INTEGER */,
	state_maintenance: state_maintenance /* INTEGER */,
	param_leakscantime: param_leakscantime /* INTEGER */,
	param_vactimeprogress: param_vactimeprogress /* INTEGER */,
	param_prodcounttotal: param_prodcounttotal /* INTEGER */,
	recipe_vacmode: recipe_vacmode /* INTEGER */,
	opmsg_beltspeedhigh: opmsg_beltspeedhigh /* INTEGER */,
	state_downstreamRTR: state_downstreamRTR /* INTEGER */,
	recipe_sealtimeright: recipe_sealtimeright /* INTEGER */,
	recipe_vacholdtime: recipe_vacholdtime /* INTEGER */,
	param_speedcpm: param_speedcpm /* INTEGER */,
    state_run:state_run,
    shiftNo:shiftNo,
    shiftStrtTime:null,
    param_cycletimestamp: param_cycletimestamp
};
//
//// result: INFOTABLE
var result = Things["SEE_FC_PostGres_Database"].insertVS95TSRemoteMachinesData(params);
//me.shiftNumber=shiftNo; 
//}
//catch(err){
//}   
logger.debug("TT_RTTFT_VS95TS_V_0_0_1  InsertRecordDB - END "+me.name);   
    
    
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></ServiceImplementations><Subscriptions><Subscription enabled="true" eventName="DataChange" source="" sourceProperty="alarm_02"><ServiceImplementation description="" handlerName="Script" name="Event.DataChange:Property.alarm_02"><ConfigurationTables><ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[logger.debug("TT_RTTFT_VS95TS_V_0_0_1  Data Change subscription for alarm02  - START "+me.name);
try{

var currentTime = Date.now();
var params = {
	recipe_cooltime: me.recipe_cooltime /* INTEGER */,
	alarm_24: me.alarm_24 /* INTEGER */,
	recipe_prereentrytime: me.recipe_prereentrytime /* INTEGER */,
	recipe_productdetectionondelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	rAirflow_VacuumValve: me.infotable_bPreemptiveDataAvailable.rAirflow_VacuumValve /* INTEGER */,
	config_booster: me.config_booster /* INTEGER */,
	opmsg_bagdetectsensorleft: me.opmsg_bagdetectsensorleft /* INTEGER */,
	param_vacreached: me.infotable_VacComplete.param_vacreached /* INTEGER */,
	state_cleaning: me.state_cleaning /* INTEGER */,
	param_utillizationleft: me.infotable_ProductLoadDone.param_utillizationleft /* INTEGER */,
	config_exitconveyor: me.config_exitconveyor /* INTEGER */,
	config_profilbelt: me.config_profilbelt /* INTEGER */,
	state_upstreamRTS: me.state_upstreamRTS /* INTEGER */,
	config_cognipro: me.config_cognipro /* INTEGER */,
	param_lifetimecycles: me.infotable_VacComplete.param_lifetimecycles /* INTEGER */,
	recipe_vactarget: me.recipe_vactarget /* INTEGER */,
	config_centralvac: me.config_centralvac /* INTEGER */,
	recipe_ultravacdelaytime: me.recipe_ultravacdelaytime /* INTEGER */,
	param_vac: me.param_vac /* INTEGER */,
	param_vaccomplete: me.param_vaccomplete /* INTEGER */,
	param_leakholdactive: me.param_leakholdactive /* INTEGER */,
	tVacuumDrawingTimeSeconds: me.infotable_bPreemptiveDataAvailable.tVacuumDrawingTimeSeconds /* INTEGER */,
	param_vacabort: me.param_vacabort /* INTEGER */,
	config_sealheightadj: me.config_sealheightadj /* INTEGER */,
	alarm_20: me.alarm_20 /* INTEGER */,
	state_stop: me.state_stop /* INTEGER */,
	rAirflow_Tensioning: me.infotable_bPreemptiveDataAvailable.rAirflow_Tensioning /* INTEGER */,
	state_leaktest: me.state_leaktest /* INTEGER */,
	recipe_lidopendelaytime: me.recipe_lidopendelaytime /* INTEGER */,
	config_productdirection: me.config_productdirection /* INTEGER */,
	config_preemptivetest: me.config_preemptivetest /* INTEGER */,
	rAirflow_Precutcylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Precutcylinders /* INTEGER */,
	param_utillizationright: me.infotable_ProductLoadDone.param_utillizationright /* INTEGER */,
	rLeak_VacuumPumpSide: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumPumpSide /* INTEGER */,
	param_leakmeasured: me.infotable_LeakHoldActive.param_leakmeasured /* INTEGER */,
	rLeak_VacuumChamber_Sealing: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Sealing /* INTEGER */,
	param_operationhours: me.param_operationhours /* INTEGER */,
	state_preemptivetest: me.state_preemptivetest /* INTEGER */,
	config_plc_prg: me.config_plc_prg /* INTEGER */,
	param_prodcountleft: me.param_prodcountleft /* INTEGER */,
	recipe_name: me.recipe_name /* INTEGER */,
	param_prodcountright: me.param_prodcountright /* INTEGER */,
	config_trimremovemonior: me.config_trimremovemonior /* INTEGER */,
	alarm_04: me.alarm_04 /* INTEGER */,
	recipe_vactime: me.recipe_vactime /* INTEGER */,
	alarm_05: me.alarm_05 /* INTEGER */,
	tVacuumLeaktestDuration: me.infotable_bPreemptiveDataAvailable.tVacuumLeaktestDuration /* INTEGER */,
	alarm_02: eventData.newValue.value /* INTEGER */,
	param_leakpumpstate: me.param_leakpumpstate /* INTEGER */,
	alarm_03: me.alarm_03 /* INTEGER */,
	opmsg_beltspeedmed: me.opmsg_beltspeedmed /* INTEGER */,
	alarm_08: me.alarm_08 /* INTEGER */,
	recipe_vacprolongtime: me.recipe_vacprolongtime /* INTEGER */,
	param_pumphours: me.param_pumphours /* INTEGER */,
	param_vaccycletime: me.infotable_VacComplete.param_vaccycletime /* INTEGER */,
	rAirflow_BasePosition: me.infotable_bPreemptiveDataAvailable.rAirflow_BasePosition /* INTEGER */,
	recipe_productdetectionoffdelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	machineID: me.name /* STRING */,
	recipe_ultravactime: me.recipe_ultravactime /* INTEGER */,
	state_alarm: me.state_alarm /* INTEGER */,
	param_speedCPM: me.infotable_VacComplete.param_speedCPM /* INTEGER */,
	rAirflow_Chambercylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Chambercylinders /* INTEGER */,
	opmsg_beltspeedlow: me.opmsg_beltspeedlow /* INTEGER */,
	state_plcup: me.state_plcup /* INTEGER */,
	rAirflow_ReentryValve: me.infotable_bPreemptiveDataAvailable.rAirflow_ReentryValve /* INTEGER */,
	plcTimeStamp: dateFormat(currentTime,  "yyyy-MM-dd HH:mm:ss.SSS"),
	opmsg_bagdetectsensorright: me.opmsg_bagdetectsensorright /* INTEGER */,
	rLeak_VacuumChamber_Precut: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Precut /* INTEGER */,
	param_utillizationtotal: me.infotable_ProductLoadDone.param_utillizationtotal/* INTEGER */,
	param_productloaddone: me.param_productloaddone /* INTEGER */,
	config_exitsynchro: me.config_exitsynchro /* INTEGER */,
	recipe_vcsdeltatime: me.recipe_vcsdeltatime /* INTEGER */,
	rLeak_VacuumChamber_NoAction: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_NoAction /* INTEGER */,
	recipe_sealtimeleft: me.recipe_sealtimeleft /* INTEGER */,
	state_production: me.state_production /* INTEGER */,
	param_leaktestsource: me.param_leaktestsource /* INTEGER */,
	config_lineversion: me.config_lineversion /* INTEGER */,
	rAirflow_Sealing: me.infotable_bPreemptiveDataAvailable.rAirflow_Sealing /* INTEGER */,
	state_maintenance: me.state_maintenance /* INTEGER */,
	param_leakscantime: me.infotable_LeakHoldActive.param_leakscantime /* INTEGER */,
	param_vactimeprogress: me.param_vactimeprogress /* INTEGER */,
	param_prodcounttotal: me.param_prodcounttotal /* INTEGER */,
	recipe_vacmode: me.recipe_vacmode /* INTEGER */,
	opmsg_beltspeedhigh: me.opmsg_beltspeedhigh /* INTEGER */,
	state_downstreamRTR: me.state_downstreamRTR /* INTEGER */,
	recipe_sealtimeright: me.recipe_sealtimeright /* INTEGER */,
	recipe_vacholdtime: me.recipe_vacholdtime /* INTEGER */,
	param_speedcpm: me.infotable_VacComplete.param_speedcpm /* INTEGER */,
    state_run:me.state_run,
    param_cycletimestamp:me.infotable_VacComplete.param_cycletimestamp
};
//
me.insertDBRecord(params);
    
}
catch(e){
logger.error("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for alarm02 - Exception "+e);    
}

logger.debug("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for alarm02 - END "+me.name);]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></Subscription><Subscription enabled="true" eventName="DataChange" source="" sourceProperty="alarm_03"><ServiceImplementation description="" handlerName="Script" name="Event.DataChange:Property.alarm_03"><ConfigurationTables><ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[logger.debug("TT_RTTFT_VS95TS_V_0_0_1  Data Change subscription for alarm03  - START "+me.name);
try{

var currentTime = Date.now();
var params = {
	recipe_cooltime: me.recipe_cooltime /* INTEGER */,
	alarm_24: me.alarm_24 /* INTEGER */,
	recipe_prereentrytime: me.recipe_prereentrytime /* INTEGER */,
	recipe_productdetectionondelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	rAirflow_VacuumValve: me.infotable_bPreemptiveDataAvailable.rAirflow_VacuumValve /* INTEGER */,
	config_booster: me.config_booster /* INTEGER */,
	opmsg_bagdetectsensorleft: me.opmsg_bagdetectsensorleft /* INTEGER */,
	param_vacreached: me.infotable_VacComplete.param_vacreached /* INTEGER */,
	state_cleaning: me.state_cleaning /* INTEGER */,
	param_utillizationleft: me.infotable_ProductLoadDone.param_utillizationleft /* INTEGER */,
	config_exitconveyor: me.config_exitconveyor /* INTEGER */,
	config_profilbelt: me.config_profilbelt /* INTEGER */,
	state_upstreamRTS: me.state_upstreamRTS /* INTEGER */,
	config_cognipro: me.config_cognipro /* INTEGER */,
	param_lifetimecycles: me.infotable_VacComplete.param_lifetimecycles /* INTEGER */,
	recipe_vactarget: me.recipe_vactarget /* INTEGER */,
	config_centralvac: me.config_centralvac /* INTEGER */,
	recipe_ultravacdelaytime: me.recipe_ultravacdelaytime /* INTEGER */,
	param_vac: me.param_vac /* INTEGER */,
	param_vaccomplete: me.param_vaccomplete /* INTEGER */,
	param_leakholdactive: me.param_leakholdactive /* INTEGER */,
	tVacuumDrawingTimeSeconds: me.infotable_bPreemptiveDataAvailable.tVacuumDrawingTimeSeconds /* INTEGER */,
	param_vacabort: me.param_vacabort /* INTEGER */,
	config_sealheightadj: me.config_sealheightadj /* INTEGER */,
	alarm_20: me.alarm_20 /* INTEGER */,
	state_stop: me.state_stop /* INTEGER */,
	rAirflow_Tensioning: me.infotable_bPreemptiveDataAvailable.rAirflow_Tensioning /* INTEGER */,
	state_leaktest: me.state_leaktest /* INTEGER */,
	recipe_lidopendelaytime: me.recipe_lidopendelaytime /* INTEGER */,
	config_productdirection: me.config_productdirection /* INTEGER */,
	config_preemptivetest: me.config_preemptivetest /* INTEGER */,
	rAirflow_Precutcylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Precutcylinders /* INTEGER */,
	param_utillizationright: me.infotable_ProductLoadDone.param_utillizationright /* INTEGER */,
	rLeak_VacuumPumpSide: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumPumpSide /* INTEGER */,
	param_leakmeasured: me.infotable_LeakHoldActive.param_leakmeasured /* INTEGER */,
	rLeak_VacuumChamber_Sealing: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Sealing /* INTEGER */,
	param_operationhours: me.param_operationhours /* INTEGER */,
	state_preemptivetest: me.state_preemptivetest /* INTEGER */,
	config_plc_prg: me.config_plc_prg /* INTEGER */,
	param_prodcountleft: me.param_prodcountleft /* INTEGER */,
	recipe_name: me.recipe_name /* INTEGER */,
	param_prodcountright: me.param_prodcountright /* INTEGER */,
	config_trimremovemonior: me.config_trimremovemonior /* INTEGER */,
	alarm_04: me.alarm_04 /* INTEGER */,
	recipe_vactime: me.recipe_vactime /* INTEGER */,
	alarm_05: me.alarm_05 /* INTEGER */,
	tVacuumLeaktestDuration: me.infotable_bPreemptiveDataAvailable.tVacuumLeaktestDuration /* INTEGER */,
	alarm_02: me.alarm_02 /* INTEGER */,
	param_leakpumpstate: me.param_leakpumpstate /* INTEGER */,
	alarm_03: eventData.newValue.value /* INTEGER */,
	opmsg_beltspeedmed: me.opmsg_beltspeedmed /* INTEGER */,
	alarm_08: me.alarm_08 /* INTEGER */,
	recipe_vacprolongtime: me.recipe_vacprolongtime /* INTEGER */,
	param_pumphours: me.param_pumphours /* INTEGER */,
	param_vaccycletime: me.infotable_VacComplete.param_vaccycletime /* INTEGER */,
	rAirflow_BasePosition: me.infotable_bPreemptiveDataAvailable.rAirflow_BasePosition /* INTEGER */,
	recipe_productdetectionoffdelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	machineID: me.name /* STRING */,
	recipe_ultravactime: me.recipe_ultravactime /* INTEGER */,
	state_alarm: me.state_alarm /* INTEGER */,
	param_speedCPM: me.infotable_VacComplete.param_speedCPM /* INTEGER */,
	rAirflow_Chambercylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Chambercylinders /* INTEGER */,
	opmsg_beltspeedlow: me.opmsg_beltspeedlow /* INTEGER */,
	state_plcup: me.state_plcup /* INTEGER */,
	rAirflow_ReentryValve: me.infotable_bPreemptiveDataAvailable.rAirflow_ReentryValve /* INTEGER */,
	plcTimeStamp: dateFormat(currentTime,  "yyyy-MM-dd HH:mm:ss.SSS"),
	opmsg_bagdetectsensorright: me.opmsg_bagdetectsensorright /* INTEGER */,
	rLeak_VacuumChamber_Precut: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Precut /* INTEGER */,
	param_utillizationtotal: me.infotable_ProductLoadDone.param_utillizationtotal/* INTEGER */,
	param_productloaddone: me.param_productloaddone /* INTEGER */,
	config_exitsynchro: me.config_exitsynchro /* INTEGER */,
	recipe_vcsdeltatime: me.recipe_vcsdeltatime /* INTEGER */,
	rLeak_VacuumChamber_NoAction: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_NoAction /* INTEGER */,
	recipe_sealtimeleft: me.recipe_sealtimeleft /* INTEGER */,
	state_production: me.state_production /* INTEGER */,
	param_leaktestsource: me.param_leaktestsource /* INTEGER */,
	config_lineversion: me.config_lineversion /* INTEGER */,
	rAirflow_Sealing: me.infotable_bPreemptiveDataAvailable.rAirflow_Sealing /* INTEGER */,
	state_maintenance: me.state_maintenance /* INTEGER */,
	param_leakscantime: me.infotable_LeakHoldActive.param_leakscantime /* INTEGER */,
	param_vactimeprogress: me.param_vactimeprogress /* INTEGER */,
	param_prodcounttotal: me.param_prodcounttotal /* INTEGER */,
	recipe_vacmode: me.recipe_vacmode /* INTEGER */,
	opmsg_beltspeedhigh: me.opmsg_beltspeedhigh /* INTEGER */,
	state_downstreamRTR: me.state_downstreamRTR /* INTEGER */,
	recipe_sealtimeright: me.recipe_sealtimeright /* INTEGER */,
	recipe_vacholdtime: me.recipe_vacholdtime /* INTEGER */,
	param_speedcpm: me.infotable_VacComplete.param_speedcpm /* INTEGER */,
	state_run:me.state_run,
    param_cycletimestamp:me.infotable_VacComplete.param_cycletimestamp
};
//
me.insertDBRecord(params);
    
}
catch(e){
logger.error("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for alarm03 - Exception "+e);    
}

logger.debug("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for alarm03 - END "+me.name);]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></Subscription><Subscription enabled="true" eventName="DataChange" source="" sourceProperty="alarm_04"><ServiceImplementation description="" handlerName="Script" name="Event.DataChange:Property.alarm_04"><ConfigurationTables><ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[logger.debug("TT_RTTFT_VS95TS_V_0_0_1  Data Change subscription for alarm04  - START");
try{

var currentTime = Date.now();
var params = {
	recipe_cooltime: me.recipe_cooltime /* INTEGER */,
	alarm_24: me.alarm_24 /* INTEGER */,
	recipe_prereentrytime: me.recipe_prereentrytime /* INTEGER */,
	recipe_productdetectionondelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	rAirflow_VacuumValve: me.infotable_bPreemptiveDataAvailable.rAirflow_VacuumValve /* INTEGER */,
	config_booster: me.config_booster /* INTEGER */,
	opmsg_bagdetectsensorleft: me.opmsg_bagdetectsensorleft /* INTEGER */,
	param_vacreached: me.infotable_VacComplete.param_vacreached /* INTEGER */,
	state_cleaning: me.state_cleaning /* INTEGER */,
	param_utillizationleft: me.infotable_ProductLoadDone.param_utillizationleft /* INTEGER */,
	config_exitconveyor: me.config_exitconveyor /* INTEGER */,
	config_profilbelt: me.config_profilbelt /* INTEGER */,
	state_upstreamRTS: me.state_upstreamRTS /* INTEGER */,
	config_cognipro: me.config_cognipro /* INTEGER */,
	param_lifetimecycles: me.infotable_VacComplete.param_lifetimecycles /* INTEGER */,
	recipe_vactarget: me.recipe_vactarget /* INTEGER */,
	config_centralvac: me.config_centralvac /* INTEGER */,
	recipe_ultravacdelaytime: me.recipe_ultravacdelaytime /* INTEGER */,
	param_vac: me.param_vac /* INTEGER */,
	param_vaccomplete: me.param_vaccomplete /* INTEGER */,
	param_leakholdactive: me.param_leakholdactive /* INTEGER */,
	tVacuumDrawingTimeSeconds: me.infotable_bPreemptiveDataAvailable.tVacuumDrawingTimeSeconds /* INTEGER */,
	param_vacabort: me.param_vacabort /* INTEGER */,
	config_sealheightadj: me.config_sealheightadj /* INTEGER */,
	alarm_20: me.alarm_20 /* INTEGER */,
	state_stop: me.state_stop /* INTEGER */,
	rAirflow_Tensioning: me.infotable_bPreemptiveDataAvailable.rAirflow_Tensioning /* INTEGER */,
	state_leaktest: me.state_leaktest /* INTEGER */,
	recipe_lidopendelaytime: me.recipe_lidopendelaytime /* INTEGER */,
	config_productdirection: me.config_productdirection /* INTEGER */,
	config_preemptivetest: me.config_preemptivetest /* INTEGER */,
	rAirflow_Precutcylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Precutcylinders /* INTEGER */,
	param_utillizationright: me.infotable_ProductLoadDone.param_utillizationright /* INTEGER */,
	rLeak_VacuumPumpSide: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumPumpSide /* INTEGER */,
	param_leakmeasured: me.infotable_LeakHoldActive.param_leakmeasured /* INTEGER */,
	rLeak_VacuumChamber_Sealing: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Sealing /* INTEGER */,
	param_operationhours: me.param_operationhours /* INTEGER */,
	state_preemptivetest: me.state_preemptivetest /* INTEGER */,
	config_plc_prg: me.config_plc_prg /* INTEGER */,
	param_prodcountleft: me.param_prodcountleft /* INTEGER */,
	recipe_name: me.recipe_name /* INTEGER */,
	param_prodcountright: me.param_prodcountright /* INTEGER */,
	config_trimremovemonior: me.config_trimremovemonior /* INTEGER */,
	alarm_04: me.alarm_04 /* INTEGER */,
	recipe_vactime: me.recipe_vactime /* INTEGER */,
	alarm_05: me.alarm_05 /* INTEGER */,
	tVacuumLeaktestDuration: me.infotable_bPreemptiveDataAvailable.tVacuumLeaktestDuration /* INTEGER */,
	alarm_02: me.alarm_02 /* INTEGER */,
	param_leakpumpstate: me.param_leakpumpstate /* INTEGER */,
	alarm_03: me.alarm_03 /* INTEGER */,
	opmsg_beltspeedmed: me.opmsg_beltspeedmed /* INTEGER */,
	alarm_08: me.alarm_08 /* INTEGER */,
	recipe_vacprolongtime: me.recipe_vacprolongtime /* INTEGER */,
	param_pumphours: me.param_pumphours /* INTEGER */,
	param_vaccycletime: me.infotable_VacComplete.param_vaccycletime /* INTEGER */,
	rAirflow_BasePosition: me.infotable_bPreemptiveDataAvailable.rAirflow_BasePosition /* INTEGER */,
	recipe_productdetectionoffdelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	machineID: me.name /* STRING */,
	recipe_ultravactime: me.recipe_ultravactime /* INTEGER */,
	state_alarm: me.state_alarm /* INTEGER */,
	param_speedCPM: me.infotable_VacComplete.param_speedCPM /* INTEGER */,
	rAirflow_Chambercylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Chambercylinders /* INTEGER */,
	opmsg_beltspeedlow: me.opmsg_beltspeedlow /* INTEGER */,
	state_plcup: me.state_plcup /* INTEGER */,
	rAirflow_ReentryValve: me.infotable_bPreemptiveDataAvailable.rAirflow_ReentryValve /* INTEGER */,
	plcTimeStamp: dateFormat(currentTime, 'yyyy-MM-dd hh:mm:ss.sss'),
	opmsg_bagdetectsensorright: me.opmsg_bagdetectsensorright /* INTEGER */,
	rLeak_VacuumChamber_Precut: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Precut /* INTEGER */,
	param_utillizationtotal: me.infotable_ProductLoadDone.param_utillizationtotal/* INTEGER */,
	param_productloaddone: me.param_productloaddone /* INTEGER */,
	config_exitsynchro: me.config_exitsynchro /* INTEGER */,
	recipe_vcsdeltatime: me.recipe_vcsdeltatime /* INTEGER */,
	rLeak_VacuumChamber_NoAction: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_NoAction /* INTEGER */,
	recipe_sealtimeleft: me.recipe_sealtimeleft /* INTEGER */,
	state_production: me.state_production /* INTEGER */,
	param_leaktestsource: me.param_leaktestsource /* INTEGER */,
	config_lineversion: me.config_lineversion /* INTEGER */,
	rAirflow_Sealing: me.infotable_bPreemptiveDataAvailable.rAirflow_Sealing /* INTEGER */,
	state_maintenance: me.state_maintenance /* INTEGER */,
	param_leakscantime: me.infotable_LeakHoldActive.param_leakscantime /* INTEGER */,
	param_vactimeprogress: me.param_vactimeprogress /* INTEGER */,
	param_prodcounttotal: me.param_prodcounttotal /* INTEGER */,
	recipe_vacmode: me.recipe_vacmode /* INTEGER */,
	opmsg_beltspeedhigh: me.opmsg_beltspeedhigh /* INTEGER */,
	state_downstreamRTR: me.state_downstreamRTR /* INTEGER */,
	recipe_sealtimeright: me.recipe_sealtimeright /* INTEGER */,
	recipe_vacholdtime: me.recipe_vacholdtime /* INTEGER */,
	param_speedcpm: me.infotable_VacComplete.param_speedcpm /* INTEGER */,
    state_run:me.state_run,
    param_cycletimestamp:me.infotable_VacComplete.param_cycletimestamp
};
//
me.insertDBRecord(params);
    
}
catch(e){
logger.error("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for alarm04 - Exception "+e);    
}

logger.debug("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for alarm04 - END");]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></Subscription><Subscription enabled="true" eventName="DataChange" source="" sourceProperty="alarm_05"><ServiceImplementation description="" handlerName="Script" name="Event.DataChange:Property.alarm_05"><ConfigurationTables><ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[logger.debug("TT_RTTFT_VS95TS_V_0_0_1  Data Change subscription for alarm05  - START");
try{

var currentTime = Date.now();
var params = {
	recipe_cooltime: me.recipe_cooltime /* INTEGER */,
	alarm_24: me.alarm_24 /* INTEGER */,
	recipe_prereentrytime: me.recipe_prereentrytime /* INTEGER */,
	recipe_productdetectionondelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	rAirflow_VacuumValve: me.infotable_bPreemptiveDataAvailable.rAirflow_VacuumValve /* INTEGER */,
	config_booster: me.config_booster /* INTEGER */,
	opmsg_bagdetectsensorleft: me.opmsg_bagdetectsensorleft /* INTEGER */,
	param_vacreached: me.infotable_VacComplete.param_vacreached /* INTEGER */,
	state_cleaning: me.state_cleaning /* INTEGER */,
	param_utillizationleft: me.infotable_ProductLoadDone.param_utillizationleft /* INTEGER */,
	config_exitconveyor: me.config_exitconveyor /* INTEGER */,
	config_profilbelt: me.config_profilbelt /* INTEGER */,
	state_upstreamRTS: me.state_upstreamRTS /* INTEGER */,
	config_cognipro: me.config_cognipro /* INTEGER */,
	param_lifetimecycles: me.infotable_VacComplete.param_lifetimecycles /* INTEGER */,
	recipe_vactarget: me.recipe_vactarget /* INTEGER */,
	config_centralvac: me.config_centralvac /* INTEGER */,
	recipe_ultravacdelaytime: me.recipe_ultravacdelaytime /* INTEGER */,
	param_vac: me.param_vac /* INTEGER */,
	param_vaccomplete: me.param_vaccomplete /* INTEGER */,
	param_leakholdactive: me.param_leakholdactive /* INTEGER */,
	tVacuumDrawingTimeSeconds: me.infotable_bPreemptiveDataAvailable.tVacuumDrawingTimeSeconds /* INTEGER */,
	param_vacabort: me.param_vacabort /* INTEGER */,
	config_sealheightadj: me.config_sealheightadj /* INTEGER */,
	alarm_20: me.alarm_20 /* INTEGER */,
	state_stop: me.state_stop /* INTEGER */,
	rAirflow_Tensioning: me.infotable_bPreemptiveDataAvailable.rAirflow_Tensioning /* INTEGER */,
	state_leaktest: me.state_leaktest /* INTEGER */,
	recipe_lidopendelaytime: me.recipe_lidopendelaytime /* INTEGER */,
	config_productdirection: me.config_productdirection /* INTEGER */,
	config_preemptivetest: me.config_preemptivetest /* INTEGER */,
	rAirflow_Precutcylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Precutcylinders /* INTEGER */,
	param_utillizationright: me.infotable_ProductLoadDone.param_utillizationright /* INTEGER */,
	rLeak_VacuumPumpSide: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumPumpSide /* INTEGER */,
	param_leakmeasured: me.infotable_LeakHoldActive.param_leakmeasured /* INTEGER */,
	rLeak_VacuumChamber_Sealing: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Sealing /* INTEGER */,
	param_operationhours: me.param_operationhours /* INTEGER */,
	state_preemptivetest: me.state_preemptivetest /* INTEGER */,
	config_plc_prg: me.config_plc_prg /* INTEGER */,
	param_prodcountleft: me.param_prodcountleft /* INTEGER */,
	recipe_name: me.recipe_name /* INTEGER */,
	param_prodcountright: me.param_prodcountright /* INTEGER */,
	config_trimremovemonior: me.config_trimremovemonior /* INTEGER */,
	alarm_04: me.alarm_04 /* INTEGER */,
	recipe_vactime: me.recipe_vactime /* INTEGER */,
	alarm_05: me.alarm_05 /* INTEGER */,
	tVacuumLeaktestDuration: me.infotable_bPreemptiveDataAvailable.tVacuumLeaktestDuration /* INTEGER */,
	alarm_02: me.alarm_02 /* INTEGER */,
	param_leakpumpstate: me.param_leakpumpstate /* INTEGER */,
	alarm_03: me.alarm_03 /* INTEGER */,
	opmsg_beltspeedmed: me.opmsg_beltspeedmed /* INTEGER */,
	alarm_08: me.alarm_08 /* INTEGER */,
	recipe_vacprolongtime: me.recipe_vacprolongtime /* INTEGER */,
	param_pumphours: me.param_pumphours /* INTEGER */,
	param_vaccycletime: me.infotable_VacComplete.param_vaccycletime /* INTEGER */,
	rAirflow_BasePosition: me.infotable_bPreemptiveDataAvailable.rAirflow_BasePosition /* INTEGER */,
	recipe_productdetectionoffdelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	machineID: me.name /* STRING */,
	recipe_ultravactime: me.recipe_ultravactime /* INTEGER */,
	state_alarm: me.state_alarm /* INTEGER */,
	param_speedCPM: me.infotable_VacComplete.param_speedCPM /* INTEGER */,
	rAirflow_Chambercylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Chambercylinders /* INTEGER */,
	opmsg_beltspeedlow: me.opmsg_beltspeedlow /* INTEGER */,
	state_plcup: me.state_plcup /* INTEGER */,
	rAirflow_ReentryValve: me.infotable_bPreemptiveDataAvailable.rAirflow_ReentryValve /* INTEGER */,
	plcTimeStamp: dateFormat(currentTime,  "yyyy-MM-dd HH:mm:ss.SSS"),
	opmsg_bagdetectsensorright: me.opmsg_bagdetectsensorright /* INTEGER */,
	rLeak_VacuumChamber_Precut: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Precut /* INTEGER */,
	param_utillizationtotal: me.infotable_ProductLoadDone.param_utillizationtotal/* INTEGER */,
	param_productloaddone: me.param_productloaddone /* INTEGER */,
	config_exitsynchro: me.config_exitsynchro /* INTEGER */,
	recipe_vcsdeltatime: me.recipe_vcsdeltatime /* INTEGER */,
	rLeak_VacuumChamber_NoAction: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_NoAction /* INTEGER */,
	recipe_sealtimeleft: me.recipe_sealtimeleft /* INTEGER */,
	state_production: me.state_production /* INTEGER */,
	param_leaktestsource: me.param_leaktestsource /* INTEGER */,
	config_lineversion: me.config_lineversion /* INTEGER */,
	rAirflow_Sealing: me.infotable_bPreemptiveDataAvailable.rAirflow_Sealing /* INTEGER */,
	state_maintenance: me.state_maintenance /* INTEGER */,
	param_leakscantime: me.infotable_LeakHoldActive.param_leakscantime /* INTEGER */,
	param_vactimeprogress: me.param_vactimeprogress /* INTEGER */,
	param_prodcounttotal: me.param_prodcounttotal /* INTEGER */,
	recipe_vacmode: me.recipe_vacmode /* INTEGER */,
	opmsg_beltspeedhigh: me.opmsg_beltspeedhigh /* INTEGER */,
	state_downstreamRTR: me.state_downstreamRTR /* INTEGER */,
	recipe_sealtimeright: me.recipe_sealtimeright /* INTEGER */,
	recipe_vacholdtime: me.recipe_vacholdtime /* INTEGER */,
	param_speedcpm: me.infotable_VacComplete.param_speedcpm /* INTEGER */,
    state_run:me.state_run,
    param_cycletimestamp:me.infotable_VacComplete.param_cycletimestamp
};
//
me.insertDBRecord(params);
    
}
catch(e){
logger.error("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for alarm05 - Exception "+e);    
}

logger.debug("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for alarm05 - END");]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></Subscription><Subscription enabled="true" eventName="DataChange" source="" sourceProperty="alarm_08"><ServiceImplementation description="" handlerName="Script" name="Event.DataChange:Property.alarm_08"><ConfigurationTables><ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[logger.debug("TT_RTTFT_VS95TS_V_0_0_1  Data Change subscription for alarm08  - START");
try{

var currentTime = Date.now();
var params = {
	recipe_cooltime: me.recipe_cooltime /* INTEGER */,
	alarm_24: me.alarm_24 /* INTEGER */,
	recipe_prereentrytime: me.recipe_prereentrytime /* INTEGER */,
	recipe_productdetectionondelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	rAirflow_VacuumValve: me.infotable_bPreemptiveDataAvailable.rAirflow_VacuumValve /* INTEGER */,
	config_booster: me.config_booster /* INTEGER */,
	opmsg_bagdetectsensorleft: me.opmsg_bagdetectsensorleft /* INTEGER */,
	param_vacreached: me.infotable_VacComplete.param_vacreached /* INTEGER */,
	state_cleaning: me.state_cleaning /* INTEGER */,
	param_utillizationleft: me.infotable_ProductLoadDone.param_utillizationleft /* INTEGER */,
	config_exitconveyor: me.config_exitconveyor /* INTEGER */,
	config_profilbelt: me.config_profilbelt /* INTEGER */,
	state_upstreamRTS: me.state_upstreamRTS /* INTEGER */,
	config_cognipro: me.config_cognipro /* INTEGER */,
	param_lifetimecycles: me.infotable_VacComplete.param_lifetimecycles /* INTEGER */,
	recipe_vactarget: me.recipe_vactarget /* INTEGER */,
	config_centralvac: me.config_centralvac /* INTEGER */,
	recipe_ultravacdelaytime: me.recipe_ultravacdelaytime /* INTEGER */,
	param_vac: me.param_vac /* INTEGER */,
	param_vaccomplete: me.param_vaccomplete /* INTEGER */,
	param_leakholdactive: me.param_leakholdactive /* INTEGER */,
	tVacuumDrawingTimeSeconds: me.infotable_bPreemptiveDataAvailable.tVacuumDrawingTimeSeconds /* INTEGER */,
	param_vacabort: me.param_vacabort /* INTEGER */,
	config_sealheightadj: me.config_sealheightadj /* INTEGER */,
	alarm_20: me.alarm_20 /* INTEGER */,
	state_stop: me.state_stop /* INTEGER */,
	rAirflow_Tensioning: me.infotable_bPreemptiveDataAvailable.rAirflow_Tensioning /* INTEGER */,
	state_leaktest: me.state_leaktest /* INTEGER */,
	recipe_lidopendelaytime: me.recipe_lidopendelaytime /* INTEGER */,
	config_productdirection: me.config_productdirection /* INTEGER */,
	config_preemptivetest: me.config_preemptivetest /* INTEGER */,
	rAirflow_Precutcylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Precutcylinders /* INTEGER */,
	param_utillizationright: me.infotable_ProductLoadDone.param_utillizationright /* INTEGER */,
	rLeak_VacuumPumpSide: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumPumpSide /* INTEGER */,
	param_leakmeasured: me.infotable_LeakHoldActive.param_leakmeasured /* INTEGER */,
	rLeak_VacuumChamber_Sealing: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Sealing /* INTEGER */,
	param_operationhours: me.param_operationhours /* INTEGER */,
	state_preemptivetest: me.state_preemptivetest /* INTEGER */,
	config_plc_prg: me.config_plc_prg /* INTEGER */,
	param_prodcountleft: me.param_prodcountleft /* INTEGER */,
	recipe_name: me.recipe_name /* INTEGER */,
	param_prodcountright: me.param_prodcountright /* INTEGER */,
	config_trimremovemonior: me.config_trimremovemonior /* INTEGER */,
	alarm_04: me.alarm_04 /* INTEGER */,
	recipe_vactime: me.recipe_vactime /* INTEGER */,
	alarm_05: me.alarm_05 /* INTEGER */,
	tVacuumLeaktestDuration: me.infotable_bPreemptiveDataAvailable.tVacuumLeaktestDuration /* INTEGER */,
	alarm_02: me.alarm_02 /* INTEGER */,
	param_leakpumpstate: me.param_leakpumpstate /* INTEGER */,
	alarm_03: me.alarm_03 /* INTEGER */,
	opmsg_beltspeedmed: me.opmsg_beltspeedmed /* INTEGER */,
	alarm_08: me.alarm_08 /* INTEGER */,
	recipe_vacprolongtime: me.recipe_vacprolongtime /* INTEGER */,
	param_pumphours: me.param_pumphours /* INTEGER */,
	param_vaccycletime: me.infotable_VacComplete.param_vaccycletime /* INTEGER */,
	rAirflow_BasePosition: me.infotable_bPreemptiveDataAvailable.rAirflow_BasePosition /* INTEGER */,
	recipe_productdetectionoffdelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	machineID: me.name /* STRING */,
	recipe_ultravactime: me.recipe_ultravactime /* INTEGER */,
	state_alarm: me.state_alarm /* INTEGER */,
	param_speedCPM: me.infotable_VacComplete.param_speedCPM /* INTEGER */,
	rAirflow_Chambercylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Chambercylinders /* INTEGER */,
	opmsg_beltspeedlow: me.opmsg_beltspeedlow /* INTEGER */,
	state_plcup: me.state_plcup /* INTEGER */,
	rAirflow_ReentryValve: me.infotable_bPreemptiveDataAvailable.rAirflow_ReentryValve /* INTEGER */,
	plcTimeStamp: dateFormat(currentTime,  "yyyy-MM-dd HH:mm:ss.SSS"),
	opmsg_bagdetectsensorright: me.opmsg_bagdetectsensorright /* INTEGER */,
	rLeak_VacuumChamber_Precut: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Precut /* INTEGER */,
	param_utillizationtotal: me.infotable_ProductLoadDone.param_utillizationtotal/* INTEGER */,
	param_productloaddone: me.param_productloaddone /* INTEGER */,
	config_exitsynchro: me.config_exitsynchro /* INTEGER */,
	recipe_vcsdeltatime: me.recipe_vcsdeltatime /* INTEGER */,
	rLeak_VacuumChamber_NoAction: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_NoAction /* INTEGER */,
	recipe_sealtimeleft: me.recipe_sealtimeleft /* INTEGER */,
	state_production: me.state_production /* INTEGER */,
	param_leaktestsource: me.param_leaktestsource /* INTEGER */,
	config_lineversion: me.config_lineversion /* INTEGER */,
	rAirflow_Sealing: me.infotable_bPreemptiveDataAvailable.rAirflow_Sealing /* INTEGER */,
	state_maintenance: me.state_maintenance /* INTEGER */,
	param_leakscantime: me.infotable_LeakHoldActive.param_leakscantime /* INTEGER */,
	param_vactimeprogress: me.param_vactimeprogress /* INTEGER */,
	param_prodcounttotal: me.param_prodcounttotal /* INTEGER */,
	recipe_vacmode: me.recipe_vacmode /* INTEGER */,
	opmsg_beltspeedhigh: me.opmsg_beltspeedhigh /* INTEGER */,
	state_downstreamRTR: me.state_downstreamRTR /* INTEGER */,
	recipe_sealtimeright: me.recipe_sealtimeright /* INTEGER */,
	recipe_vacholdtime: me.recipe_vacholdtime /* INTEGER */,
	param_speedcpm: me.infotable_VacComplete.param_speedcpm /* INTEGER */,
    state_run:me.state_run,
    param_cycletimestamp:me.infotable_VacComplete.param_cycletimestamp
};
//
me.insertDBRecord(params);
    
}
catch(e){
logger.error("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for alarm08 - Exception "+e);    
}

logger.debug("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for alarm08 - END");]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></Subscription><Subscription enabled="true" eventName="DataChange" source="" sourceProperty="alarm_20"><ServiceImplementation description="" handlerName="Script" name="Event.DataChange:Property.alarm_20"><ConfigurationTables><ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[logger.debug("TT_RTTFT_VS95TS_V_0_0_1  Data Change subscription for alarm20  - START "+me.name);
try{

var currentTime = Date.now();
var params = {
	recipe_cooltime: me.recipe_cooltime /* INTEGER */,
	alarm_24: me.alarm_24 /* INTEGER */,
	recipe_prereentrytime: me.recipe_prereentrytime /* INTEGER */,
	recipe_productdetectionondelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	rAirflow_VacuumValve: me.infotable_bPreemptiveDataAvailable.rAirflow_VacuumValve /* INTEGER */,
	config_booster: me.config_booster /* INTEGER */,
	opmsg_bagdetectsensorleft: me.opmsg_bagdetectsensorleft /* INTEGER */,
	param_vacreached: me.infotable_VacComplete.param_vacreached /* INTEGER */,
	state_cleaning: me.state_cleaning /* INTEGER */,
	param_utillizationleft: me.infotable_ProductLoadDone.param_utillizationleft /* INTEGER */,
	config_exitconveyor: me.config_exitconveyor /* INTEGER */,
	config_profilbelt: me.config_profilbelt /* INTEGER */,
	state_upstreamRTS: me.state_upstreamRTS /* INTEGER */,
	config_cognipro: me.config_cognipro /* INTEGER */,
	param_lifetimecycles: me.infotable_VacComplete.param_lifetimecycles /* INTEGER */,
	recipe_vactarget: me.recipe_vactarget /* INTEGER */,
	config_centralvac: me.config_centralvac /* INTEGER */,
	recipe_ultravacdelaytime: me.recipe_ultravacdelaytime /* INTEGER */,
	param_vac: me.param_vac /* INTEGER */,
	param_vaccomplete: me.param_vaccomplete /* INTEGER */,
	param_leakholdactive: me.param_leakholdactive /* INTEGER */,
	tVacuumDrawingTimeSeconds: me.infotable_bPreemptiveDataAvailable.tVacuumDrawingTimeSeconds /* INTEGER */,
	param_vacabort: me.param_vacabort /* INTEGER */,
	config_sealheightadj: me.config_sealheightadj /* INTEGER */,
	alarm_20: eventData.newValue.value /* INTEGER */,
	state_stop: me.state_stop /* INTEGER */,
	rAirflow_Tensioning: me.infotable_bPreemptiveDataAvailable.rAirflow_Tensioning /* INTEGER */,
	state_leaktest: me.state_leaktest /* INTEGER */,
	recipe_lidopendelaytime: me.recipe_lidopendelaytime /* INTEGER */,
	config_productdirection: me.config_productdirection /* INTEGER */,
	config_preemptivetest: me.config_preemptivetest /* INTEGER */,
	rAirflow_Precutcylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Precutcylinders /* INTEGER */,
	param_utillizationright: me.infotable_ProductLoadDone.param_utillizationright /* INTEGER */,
	rLeak_VacuumPumpSide: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumPumpSide /* INTEGER */,
	param_leakmeasured: me.infotable_LeakHoldActive.param_leakmeasured /* INTEGER */,
	rLeak_VacuumChamber_Sealing: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Sealing /* INTEGER */,
	param_operationhours: me.param_operationhours /* INTEGER */,
	state_preemptivetest: me.state_preemptivetest /* INTEGER */,
	config_plc_prg: me.config_plc_prg /* INTEGER */,
	param_prodcountleft: me.param_prodcountleft /* INTEGER */,
	recipe_name: me.recipe_name /* INTEGER */,
	param_prodcountright: me.param_prodcountright /* INTEGER */,
	config_trimremovemonior: me.config_trimremovemonior /* INTEGER */,
	alarm_04: me.alarm_04 /* INTEGER */,
	recipe_vactime: me.recipe_vactime /* INTEGER */,
	alarm_05: me.alarm_05 /* INTEGER */,
	tVacuumLeaktestDuration: me.infotable_bPreemptiveDataAvailable.tVacuumLeaktestDuration /* INTEGER */,
	alarm_02: me.alarm_02 /* INTEGER */,
	param_leakpumpstate: me.param_leakpumpstate /* INTEGER */,
	alarm_03: me.alarm_03 /* INTEGER */,
	opmsg_beltspeedmed: me.opmsg_beltspeedmed /* INTEGER */,
	alarm_08: me.alarm_08 /* INTEGER */,
	recipe_vacprolongtime: me.recipe_vacprolongtime /* INTEGER */,
	param_pumphours: me.param_pumphours /* INTEGER */,
	param_vaccycletime: me.infotable_VacComplete.param_vaccycletime /* INTEGER */,
	rAirflow_BasePosition: me.infotable_bPreemptiveDataAvailable.rAirflow_BasePosition /* INTEGER */,
	recipe_productdetectionoffdelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	machineID: me.name /* STRING */,
	recipe_ultravactime: me.recipe_ultravactime /* INTEGER */,
	state_alarm: me.state_alarm /* INTEGER */,
	param_speedCPM: me.infotable_VacComplete.param_speedCPM /* INTEGER */,
	rAirflow_Chambercylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Chambercylinders /* INTEGER */,
	opmsg_beltspeedlow: me.opmsg_beltspeedlow /* INTEGER */,
	state_plcup: me.state_plcup /* INTEGER */,
	rAirflow_ReentryValve: me.infotable_bPreemptiveDataAvailable.rAirflow_ReentryValve /* INTEGER */,
	plcTimeStamp: dateFormat(currentTime,  "yyyy-MM-dd HH:mm:ss.SSS"),
	opmsg_bagdetectsensorright: me.opmsg_bagdetectsensorright /* INTEGER */,
	rLeak_VacuumChamber_Precut: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Precut /* INTEGER */,
	param_utillizationtotal: me.infotable_ProductLoadDone.param_utillizationtotal/* INTEGER */,
	param_productloaddone: me.param_productloaddone /* INTEGER */,
	config_exitsynchro: me.config_exitsynchro /* INTEGER */,
	recipe_vcsdeltatime: me.recipe_vcsdeltatime /* INTEGER */,
	rLeak_VacuumChamber_NoAction: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_NoAction /* INTEGER */,
	recipe_sealtimeleft: me.recipe_sealtimeleft /* INTEGER */,
	state_production: me.state_production /* INTEGER */,
	param_leaktestsource: me.param_leaktestsource /* INTEGER */,
	config_lineversion: me.config_lineversion /* INTEGER */,
	rAirflow_Sealing: me.infotable_bPreemptiveDataAvailable.rAirflow_Sealing /* INTEGER */,
	state_maintenance: me.state_maintenance /* INTEGER */,
	param_leakscantime: me.infotable_LeakHoldActive.param_leakscantime /* INTEGER */,
	param_vactimeprogress: me.param_vactimeprogress /* INTEGER */,
	param_prodcounttotal: me.param_prodcounttotal /* INTEGER */,
	recipe_vacmode: me.recipe_vacmode /* INTEGER */,
	opmsg_beltspeedhigh: me.opmsg_beltspeedhigh /* INTEGER */,
	state_downstreamRTR: me.state_downstreamRTR /* INTEGER */,
	recipe_sealtimeright: me.recipe_sealtimeright /* INTEGER */,
	recipe_vacholdtime: me.recipe_vacholdtime /* INTEGER */,
	param_speedcpm: me.infotable_VacComplete.param_speedcpm /* INTEGER */,
    state_run:me.state_run,
    param_cycletimestamp:me.infotable_VacComplete.param_cycletimestamp
};
//
me.insertDBRecord(params);
    
}
catch(e){
logger.error("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for alarm20- Exception "+e);    
}

logger.debug("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for alarm20 - END "+me.name);]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></Subscription><Subscription enabled="true" eventName="DataChange" source="" sourceProperty="alarm_24"><ServiceImplementation description="" handlerName="Script" name="Event.DataChange:Property.alarm_24"><ConfigurationTables><ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[logger.debug("TT_RTTFT_VS95TS_V_0_0_1  Data Change subscription for alarm24  - START "+me.name);
try{

var currentTime = Date.now();
var params = {
	recipe_cooltime: me.recipe_cooltime /* INTEGER */,
	alarm_24: eventData.newValue.value /* INTEGER */,
	recipe_prereentrytime: me.recipe_prereentrytime /* INTEGER */,
	recipe_productdetectionondelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	rAirflow_VacuumValve: me.infotable_bPreemptiveDataAvailable.rAirflow_VacuumValve /* INTEGER */,
	config_booster: me.config_booster /* INTEGER */,
	opmsg_bagdetectsensorleft: me.opmsg_bagdetectsensorleft /* INTEGER */,
	param_vacreached: me.infotable_VacComplete.param_vacreached /* INTEGER */,
	state_cleaning: me.state_cleaning /* INTEGER */,
	param_utillizationleft: me.infotable_ProductLoadDone.param_utillizationleft /* INTEGER */,
	config_exitconveyor: me.config_exitconveyor /* INTEGER */,
	config_profilbelt: me.config_profilbelt /* INTEGER */,
	state_upstreamRTS: me.state_upstreamRTS /* INTEGER */,
	config_cognipro: me.config_cognipro /* INTEGER */,
	param_lifetimecycles: me.infotable_VacComplete.param_lifetimecycles /* INTEGER */,
	recipe_vactarget: me.recipe_vactarget /* INTEGER */,
	config_centralvac: me.config_centralvac /* INTEGER */,
	recipe_ultravacdelaytime: me.recipe_ultravacdelaytime /* INTEGER */,
	param_vac: me.param_vac /* INTEGER */,
	param_vaccomplete: me.param_vaccomplete /* INTEGER */,
	param_leakholdactive: me.param_leakholdactive /* INTEGER */,
	tVacuumDrawingTimeSeconds: me.infotable_bPreemptiveDataAvailable.tVacuumDrawingTimeSeconds /* INTEGER */,
	param_vacabort: me.param_vacabort /* INTEGER */,
	config_sealheightadj: me.config_sealheightadj /* INTEGER */,
	alarm_20: me.alarm_20 /* INTEGER */,
	state_stop: me.state_stop /* INTEGER */,
	rAirflow_Tensioning: me.infotable_bPreemptiveDataAvailable.rAirflow_Tensioning /* INTEGER */,
	state_leaktest: me.state_leaktest /* INTEGER */,
	recipe_lidopendelaytime: me.recipe_lidopendelaytime /* INTEGER */,
	config_productdirection: me.config_productdirection /* INTEGER */,
	config_preemptivetest: me.config_preemptivetest /* INTEGER */,
	rAirflow_Precutcylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Precutcylinders /* INTEGER */,
	param_utillizationright: me.infotable_ProductLoadDone.param_utillizationright /* INTEGER */,
	rLeak_VacuumPumpSide: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumPumpSide /* INTEGER */,
	param_leakmeasured: me.infotable_LeakHoldActive.param_leakmeasured /* INTEGER */,
	rLeak_VacuumChamber_Sealing: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Sealing /* INTEGER */,
	param_operationhours: me.param_operationhours /* INTEGER */,
	state_preemptivetest: me.state_preemptivetest /* INTEGER */,
	config_plc_prg: me.config_plc_prg /* INTEGER */,
	param_prodcountleft: me.param_prodcountleft /* INTEGER */,
	recipe_name: me.recipe_name /* INTEGER */,
	param_prodcountright: me.param_prodcountright /* INTEGER */,
	config_trimremovemonior: me.config_trimremovemonior /* INTEGER */,
	alarm_04: me.alarm_04 /* INTEGER */,
	recipe_vactime: me.recipe_vactime /* INTEGER */,
	alarm_05: me.alarm_05 /* INTEGER */,
	tVacuumLeaktestDuration: me.infotable_bPreemptiveDataAvailable.tVacuumLeaktestDuration /* INTEGER */,
	alarm_02: me.alarm_02 /* INTEGER */,
	param_leakpumpstate: me.param_leakpumpstate /* INTEGER */,
	alarm_03: me.alarm_03 /* INTEGER */,
	opmsg_beltspeedmed: me.opmsg_beltspeedmed /* INTEGER */,
	alarm_08: me.alarm_08 /* INTEGER */,
	recipe_vacprolongtime: me.recipe_vacprolongtime /* INTEGER */,
	param_pumphours: me.param_pumphours /* INTEGER */,
	param_vaccycletime: me.infotable_VacComplete.param_vaccycletime /* INTEGER */,
	rAirflow_BasePosition: me.infotable_bPreemptiveDataAvailable.rAirflow_BasePosition /* INTEGER */,
	recipe_productdetectionoffdelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	machineID: me.name /* STRING */,
	recipe_ultravactime: me.recipe_ultravactime /* INTEGER */,
	state_alarm: me.state_alarm /* INTEGER */,
	param_speedCPM: me.infotable_VacComplete.param_speedCPM /* INTEGER */,
	rAirflow_Chambercylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Chambercylinders /* INTEGER */,
	opmsg_beltspeedlow: me.opmsg_beltspeedlow /* INTEGER */,
	state_plcup: me.state_plcup /* INTEGER */,
	rAirflow_ReentryValve: me.infotable_bPreemptiveDataAvailable.rAirflow_ReentryValve /* INTEGER */,
	plcTimeStamp: dateFormat(currentTime,  "yyyy-MM-dd HH:mm:ss.SSS"),
	opmsg_bagdetectsensorright: me.opmsg_bagdetectsensorright /* INTEGER */,
	rLeak_VacuumChamber_Precut: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Precut /* INTEGER */,
	param_utillizationtotal: me.infotable_ProductLoadDone.param_utillizationtotal/* INTEGER */,
	param_productloaddone: me.param_productloaddone /* INTEGER */,
	config_exitsynchro: me.config_exitsynchro /* INTEGER */,
	recipe_vcsdeltatime: me.recipe_vcsdeltatime /* INTEGER */,
	rLeak_VacuumChamber_NoAction: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_NoAction /* INTEGER */,
	recipe_sealtimeleft: me.recipe_sealtimeleft /* INTEGER */,
	state_production: me.state_production /* INTEGER */,
	param_leaktestsource: me.param_leaktestsource /* INTEGER */,
	config_lineversion: me.config_lineversion /* INTEGER */,
	rAirflow_Sealing: me.infotable_bPreemptiveDataAvailable.rAirflow_Sealing /* INTEGER */,
	state_maintenance: me.state_maintenance /* INTEGER */,
	param_leakscantime: me.infotable_LeakHoldActive.param_leakscantime /* INTEGER */,
	param_vactimeprogress: me.param_vactimeprogress /* INTEGER */,
	param_prodcounttotal: me.param_prodcounttotal /* INTEGER */,
	recipe_vacmode: me.recipe_vacmode /* INTEGER */,
	opmsg_beltspeedhigh: me.opmsg_beltspeedhigh /* INTEGER */,
	state_downstreamRTR: me.state_downstreamRTR /* INTEGER */,
	recipe_sealtimeright: me.recipe_sealtimeright /* INTEGER */,
	recipe_vacholdtime: me.recipe_vacholdtime /* INTEGER */,
	param_speedcpm: me.infotable_VacComplete.param_speedcpm /* INTEGER */,
    state_run:me.state_run,
    param_cycletimestamp:me.infotable_VacComplete.param_cycletimestamp
};
//
me.insertDBRecord(params);
    
}
catch(e){
logger.error("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for alarm24 - Exception "+e);    
}

logger.debug("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for alarm24 - END "+me.name);]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></Subscription><Subscription enabled="true" eventName="DataChange" source="" sourceProperty="infotable_VacComplete"><ServiceImplementation description="" handlerName="Script" name="Event.DataChange:Property.infotable_VacComplete"><ConfigurationTables><ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[logger.debug("TT_RTTFT_VS95TS_V_0_0_1  Data Change subscription for Infotable Vac Complete - START");
try{

var currentTime = Date.now();
var params = {
	recipe_cooltime: me.recipe_cooltime /* INTEGER */,
	alarm_24: me.alarm_24 /* INTEGER */,
	recipe_prereentrytime: me.recipe_prereentrytime /* INTEGER */,
	recipe_productdetectionondelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	rAirflow_VacuumValve: me.infotable_bPreemptiveDataAvailable.rAirflow_VacuumValve /* INTEGER */,
	config_booster: me.config_booster /* INTEGER */,
	opmsg_bagdetectsensorleft: me.opmsg_bagdetectsensorleft /* INTEGER */,
	param_vacreached: eventData.newValue.value.param_vacreached /* INTEGER */,
	state_cleaning: me.state_cleaning /* INTEGER */,
	param_utillizationleft: me.infotable_ProductLoadDone.param_utillizationleft /* INTEGER */,
	config_exitconveyor: me.config_exitconveyor /* INTEGER */,
	config_profilbelt: me.config_profilbelt /* INTEGER */,
	state_upstreamRTS: me.state_upstreamRTS /* INTEGER */,
	config_cognipro: me.config_cognipro /* INTEGER */,
	param_lifetimecycles: eventData.newValue.value.param_lifetimecycles /* INTEGER */,
	recipe_vactarget: me.recipe_vactarget /* INTEGER */,
	config_centralvac: me.config_centralvac /* INTEGER */,
	recipe_ultravacdelaytime: me.recipe_ultravacdelaytime /* INTEGER */,
	param_vac: me.param_vac /* INTEGER */,
	param_vaccomplete: me.param_vaccomplete /* INTEGER */,
	param_leakholdactive: me.param_leakholdactive /* INTEGER */,
	tVacuumDrawingTimeSeconds: me.infotable_bPreemptiveDataAvailable.tVacuumDrawingTimeSeconds /* INTEGER */,
	param_vacabort: me.param_vacabort /* INTEGER */,
	config_sealheightadj: me.config_sealheightadj /* INTEGER */,
	alarm_20: me.alarm_20 /* INTEGER */,
	state_stop: me.state_stop /* INTEGER */,
	rAirflow_Tensioning: me.infotable_bPreemptiveDataAvailable.rAirflow_Tensioning /* INTEGER */,
	state_leaktest: me.state_leaktest /* INTEGER */,
	recipe_lidopendelaytime: me.recipe_lidopendelaytime /* INTEGER */,
	config_productdirection: me.config_productdirection /* INTEGER */,
	config_preemptivetest: me.config_preemptivetest /* INTEGER */,
	rAirflow_Precutcylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Precutcylinders /* INTEGER */,
	param_utillizationright: me.infotable_ProductLoadDone.param_utillizationright /* INTEGER */,
	rLeak_VacuumPumpSide: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumPumpSide /* INTEGER */,
	param_leakmeasured: me.infotable_LeakHoldActive.param_leakmeasured /* INTEGER */,
	rLeak_VacuumChamber_Sealing: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Sealing /* INTEGER */,
	param_operationhours: me.param_operationhours /* INTEGER */,
	state_preemptivetest: me.state_preemptivetest /* INTEGER */,
	config_plc_prg: me.config_plc_prg /* INTEGER */,
	param_prodcountleft: me.param_prodcountleft /* INTEGER */,
	recipe_name: me.recipe_name /* INTEGER */,
	param_prodcountright: me.param_prodcountright /* INTEGER */,
	config_trimremovemonior: me.config_trimremovemonior /* INTEGER */,
	alarm_04: me.alarm_04 /* INTEGER */,
	recipe_vactime: me.recipe_vactime /* INTEGER */,
	alarm_05: me.alarm_05 /* INTEGER */,
	tVacuumLeaktestDuration: me.infotable_bPreemptiveDataAvailable.tVacuumLeaktestDuration /* INTEGER */,
	alarm_02: me.alarm_02 /* INTEGER */,
	param_leakpumpstate: me.param_leakpumpstate /* INTEGER */,
	alarm_03: me.alarm_03 /* INTEGER */,
	opmsg_beltspeedmed: me.opmsg_beltspeedmed /* INTEGER */,
	alarm_08: me.alarm_08 /* INTEGER */,
	recipe_vacprolongtime: me.recipe_vacprolongtime /* INTEGER */,
	param_pumphours: me.param_pumphours /* INTEGER */,
	param_vaccycletime: eventData.newValue.value.param_vaccycletime /* INTEGER */,
	rAirflow_BasePosition: me.infotable_bPreemptiveDataAvailable.rAirflow_BasePosition /* INTEGER */,
	recipe_productdetectionoffdelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	machineID: me.name /* STRING */,
	recipe_ultravactime: me.recipe_ultravactime /* INTEGER */,
	state_alarm: me.state_alarm /* INTEGER */,
	param_speedCPM: eventData.newValue.value.param_speedCPM /* INTEGER */,
	rAirflow_Chambercylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Chambercylinders /* INTEGER */,
	opmsg_beltspeedlow: me.opmsg_beltspeedlow /* INTEGER */,
	state_plcup: me.state_plcup /* INTEGER */,
	rAirflow_ReentryValve: me.infotable_bPreemptiveDataAvailable.rAirflow_ReentryValve /* INTEGER */,
	plcTimeStamp: dateFormat(currentTime,  "yyyy-MM-dd HH:mm:ss.SSS"),
	opmsg_bagdetectsensorright: me.opmsg_bagdetectsensorright /* INTEGER */,
	rLeak_VacuumChamber_Precut: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Precut /* INTEGER */,
	param_utillizationtotal: me.infotable_ProductLoadDone.param_utillizationtotal/* INTEGER */,
	param_productloaddone: me.param_productloaddone /* INTEGER */,
	config_exitsynchro: me.config_exitsynchro /* INTEGER */,
	recipe_vcsdeltatime: me.recipe_vcsdeltatime /* INTEGER */,
	rLeak_VacuumChamber_NoAction: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_NoAction /* INTEGER */,
	recipe_sealtimeleft: me.recipe_sealtimeleft /* INTEGER */,
	state_production: me.state_production /* INTEGER */,
	param_leaktestsource: me.param_leaktestsource /* INTEGER */,
	config_lineversion: me.config_lineversion /* INTEGER */,
	rAirflow_Sealing: me.infotable_bPreemptiveDataAvailable.rAirflow_Sealing /* INTEGER */,
	state_maintenance: me.state_maintenance /* INTEGER */,
	param_leakscantime: me.infotable_LeakHoldActive.param_leakscantime /* INTEGER */,
	param_vactimeprogress: me.param_vactimeprogress /* INTEGER */,
	param_prodcounttotal: me.param_prodcounttotal /* INTEGER */,
	recipe_vacmode: me.recipe_vacmode /* INTEGER */,
	opmsg_beltspeedhigh: me.opmsg_beltspeedhigh /* INTEGER */,
	state_downstreamRTR: me.state_downstreamRTR /* INTEGER */,
	recipe_sealtimeright: me.recipe_sealtimeright /* INTEGER */,
	recipe_vacholdtime: me.recipe_vacholdtime /* INTEGER */,
	param_speedcpm: eventData.newValue.value.param_speedcpm /* INTEGER */,
    state_run:me.state_run,
    param_cycletimestamp:eventData.newValue.value.param_cycletimestamp
};
//
me.insertDBRecord(params);
    
}
catch(e){
logger.error("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for Infotable Vac Complete - Exception "+e);    
}

logger.debug("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for Infotable Vac Complete - END");]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></Subscription><Subscription enabled="true" eventName="DataChange" source="" sourceProperty="shiftNumber"><ServiceImplementation description="" handlerName="Script" name="Event.DataChange:Property.shiftNumber"><ConfigurationTables><ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[logger.debug("TTFT_VS95TS - ShiftNo change subscription START "+me.name);
try {
if(eventData.oldValue.value!='' && eventData.oldValue.value!=undefined){
var params = {
	assetID: me.name /* STRING */,
	par_current_shift: eventData.newValue.value /* STRING */,
	par_shift_start_time: me.shiftStrtTime /* STRING */,
	par_last_shift: eventData.oldValue.value /* STRING */
};

// result: INFOTABLE
var result = Things["SEE_FC_PostGres_Database"].calculateKPIbyShift_VS95TS(params);

}
    
} catch(err) {
logger.error("TTFT_VS95TS- ShiftNo change subscription Error "+err +" "+me.name);
}

logger.debug("TTFT_VS95TS- ShiftNo change subscription END "+me.name);]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></Subscription><Subscription enabled="true" eventName="DataChange" source="" sourceProperty="state_alarm"><ServiceImplementation description="" handlerName="Script" name="Event.DataChange:Property.state_alarm"><ConfigurationTables><ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[logger.debug("TT_RTTFT_VS95TS_V_0_0_1  Data Change subscription for state_alarm  - START "+me.name);
try{

var currentTime = Date.now();
var params = {
	recipe_cooltime: me.recipe_cooltime /* INTEGER */,
	alarm_24: me.alarm_24 /* INTEGER */,
	recipe_prereentrytime: me.recipe_prereentrytime /* INTEGER */,
	recipe_productdetectionondelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	rAirflow_VacuumValve: me.infotable_bPreemptiveDataAvailable.rAirflow_VacuumValve /* INTEGER */,
	config_booster: me.config_booster /* INTEGER */,
	opmsg_bagdetectsensorleft: me.opmsg_bagdetectsensorleft /* INTEGER */,
	param_vacreached: me.infotable_VacComplete.param_vacreached /* INTEGER */,
	state_cleaning: me.state_cleaning /* INTEGER */,
	param_utillizationleft: me.infotable_ProductLoadDone.param_utillizationleft /* INTEGER */,
	config_exitconveyor: me.config_exitconveyor /* INTEGER */,
	config_profilbelt: me.config_profilbelt /* INTEGER */,
	state_upstreamRTS: me.state_upstreamRTS /* INTEGER */,
	config_cognipro: me.config_cognipro /* INTEGER */,
	param_lifetimecycles: me.infotable_VacComplete.param_lifetimecycles /* INTEGER */,
	recipe_vactarget: me.recipe_vactarget /* INTEGER */,
	config_centralvac: me.config_centralvac /* INTEGER */,
	recipe_ultravacdelaytime: me.recipe_ultravacdelaytime /* INTEGER */,
	param_vac: me.param_vac /* INTEGER */,
	param_vaccomplete: me.param_vaccomplete /* INTEGER */,
	param_leakholdactive: me.param_leakholdactive /* INTEGER */,
	tVacuumDrawingTimeSeconds: me.infotable_bPreemptiveDataAvailable.tVacuumDrawingTimeSeconds /* INTEGER */,
	param_vacabort: me.param_vacabort /* INTEGER */,
	config_sealheightadj: me.config_sealheightadj /* INTEGER */,
	alarm_20: me.alarm_20 /* INTEGER */,
	state_stop: me.state_stop /* INTEGER */,
	rAirflow_Tensioning: me.infotable_bPreemptiveDataAvailable.rAirflow_Tensioning /* INTEGER */,
	state_leaktest: me.state_leaktest /* INTEGER */,
	recipe_lidopendelaytime: me.recipe_lidopendelaytime /* INTEGER */,
	config_productdirection: me.config_productdirection /* INTEGER */,
	config_preemptivetest: me.config_preemptivetest /* INTEGER */,
	rAirflow_Precutcylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Precutcylinders /* INTEGER */,
	param_utillizationright: me.infotable_ProductLoadDone.param_utillizationright /* INTEGER */,
	rLeak_VacuumPumpSide: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumPumpSide /* INTEGER */,
	param_leakmeasured: me.infotable_LeakHoldActive.param_leakmeasured /* INTEGER */,
	rLeak_VacuumChamber_Sealing: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Sealing /* INTEGER */,
	param_operationhours: me.param_operationhours /* INTEGER */,
	state_preemptivetest: me.state_preemptivetest /* INTEGER */,
	config_plc_prg: me.config_plc_prg /* INTEGER */,
	param_prodcountleft: me.param_prodcountleft /* INTEGER */,
	recipe_name: me.recipe_name /* INTEGER */,
	param_prodcountright: me.param_prodcountright /* INTEGER */,
	config_trimremovemonior: me.config_trimremovemonior /* INTEGER */,
	alarm_04: me.alarm_04 /* INTEGER */,
	recipe_vactime: me.recipe_vactime /* INTEGER */,
	alarm_05: me.alarm_05 /* INTEGER */,
	tVacuumLeaktestDuration: me.infotable_bPreemptiveDataAvailable.tVacuumLeaktestDuration /* INTEGER */,
	alarm_02: me.alarm_02 /* INTEGER */,
	param_leakpumpstate: me.param_leakpumpstate /* INTEGER */,
	alarm_03: me.alarm_03 /* INTEGER */,
	opmsg_beltspeedmed: me.opmsg_beltspeedmed /* INTEGER */,
	alarm_08: me.alarm_08 /* INTEGER */,
	recipe_vacprolongtime: me.recipe_vacprolongtime /* INTEGER */,
	param_pumphours: me.param_pumphours /* INTEGER */,
	param_vaccycletime: me.infotable_VacComplete.param_vaccycletime /* INTEGER */,
	rAirflow_BasePosition: me.infotable_bPreemptiveDataAvailable.rAirflow_BasePosition /* INTEGER */,
	recipe_productdetectionoffdelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	machineID: me.name /* STRING */,
	recipe_ultravactime: me.recipe_ultravactime /* INTEGER */,
	state_alarm: eventData.newValue.value /* INTEGER */,
	param_speedCPM: me.infotable_VacComplete.param_speedCPM /* INTEGER */,
	rAirflow_Chambercylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Chambercylinders /* INTEGER */,
	opmsg_beltspeedlow: me.opmsg_beltspeedlow /* INTEGER */,
	state_plcup: me.state_plcup /* INTEGER */,
	rAirflow_ReentryValve: me.infotable_bPreemptiveDataAvailable.rAirflow_ReentryValve /* INTEGER */,
	plcTimeStamp: dateFormat(currentTime,  "yyyy-MM-dd HH:mm:ss.SSS"),
	opmsg_bagdetectsensorright: me.opmsg_bagdetectsensorright /* INTEGER */,
	rLeak_VacuumChamber_Precut: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Precut /* INTEGER */,
	param_utillizationtotal: me.infotable_ProductLoadDone.param_utillizationtotal/* INTEGER */,
	param_productloaddone: me.param_productloaddone /* INTEGER */,
	config_exitsynchro: me.config_exitsynchro /* INTEGER */,
	recipe_vcsdeltatime: me.recipe_vcsdeltatime /* INTEGER */,
	rLeak_VacuumChamber_NoAction: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_NoAction /* INTEGER */,
	recipe_sealtimeleft: me.recipe_sealtimeleft /* INTEGER */,
	state_production: me.state_production /* INTEGER */,
	param_leaktestsource: me.param_leaktestsource /* INTEGER */,
	config_lineversion: me.config_lineversion /* INTEGER */,
	rAirflow_Sealing: me.infotable_bPreemptiveDataAvailable.rAirflow_Sealing /* INTEGER */,
	state_maintenance: me.state_maintenance /* INTEGER */,
	param_leakscantime: me.infotable_LeakHoldActive.param_leakscantime /* INTEGER */,
	param_vactimeprogress: me.param_vactimeprogress /* INTEGER */,
	param_prodcounttotal: me.param_prodcounttotal /* INTEGER */,
	recipe_vacmode: me.recipe_vacmode /* INTEGER */,
	opmsg_beltspeedhigh: me.opmsg_beltspeedhigh /* INTEGER */,
	state_downstreamRTR: me.state_downstreamRTR /* INTEGER */,
	recipe_sealtimeright: me.recipe_sealtimeright /* INTEGER */,
	recipe_vacholdtime: me.recipe_vacholdtime /* INTEGER */,
	param_speedcpm: me.infotable_VacComplete.param_speedcpm /* INTEGER */,
    state_run:me.state_run,
    param_cycletimestamp:me.infotable_VacComplete.param_cycletimestamp
};
//
me.insertDBRecord(params);
    
}
catch(e){
logger.error("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for state_alarm - Exception "+e);    
}

logger.debug("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for state_alarm - END "+me.name);]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></Subscription><Subscription enabled="true" eventName="DataChange" source="" sourceProperty="state_cleaning"><ServiceImplementation description="" handlerName="Script" name="Event.DataChange:Property.state_cleaning"><ConfigurationTables><ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[logger.debug("TT_RTTFT_VS95TS_V_0_0_1  Data Change subscription for state_cleaning- START "+me.name);
try{

var currentTime = Date.now();
var params = {
	recipe_cooltime: me.recipe_cooltime /* INTEGER */,
	alarm_24: me.alarm_24 /* INTEGER */,
	recipe_prereentrytime: me.recipe_prereentrytime /* INTEGER */,
	recipe_productdetectionondelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	rAirflow_VacuumValve: me.infotable_bPreemptiveDataAvailable.rAirflow_VacuumValve /* INTEGER */,
	config_booster: me.config_booster /* INTEGER */,
	opmsg_bagdetectsensorleft: me.opmsg_bagdetectsensorleft /* INTEGER */,
	param_vacreached: me.infotable_VacComplete.param_vacreached /* INTEGER */,
	state_cleaning: eventData.newValue.value /* INTEGER */,
	param_utillizationleft: me.infotable_ProductLoadDone.param_utillizationleft /* INTEGER */,
	config_exitconveyor: me.config_exitconveyor /* INTEGER */,
	config_profilbelt: me.config_profilbelt /* INTEGER */,
	state_upstreamRTS: me.state_upstreamRTS /* INTEGER */,
	config_cognipro: me.config_cognipro /* INTEGER */,
	param_lifetimecycles: me.infotable_VacComplete.param_lifetimecycles /* INTEGER */,
	recipe_vactarget: me.recipe_vactarget /* INTEGER */,
	config_centralvac: me.config_centralvac /* INTEGER */,
	recipe_ultravacdelaytime: me.recipe_ultravacdelaytime /* INTEGER */,
	param_vac: me.param_vac /* INTEGER */,
	param_vaccomplete: me.param_vaccomplete /* INTEGER */,
	param_leakholdactive: me.param_leakholdactive /* INTEGER */,
	tVacuumDrawingTimeSeconds: me.infotable_bPreemptiveDataAvailable.tVacuumDrawingTimeSeconds /* INTEGER */,
	param_vacabort: me.param_vacabort /* INTEGER */,
	config_sealheightadj: me.config_sealheightadj /* INTEGER */,
	alarm_20: me.alarm_20 /* INTEGER */,
	state_stop: me.state_stop /* INTEGER */,
	rAirflow_Tensioning: me.infotable_bPreemptiveDataAvailable.rAirflow_Tensioning /* INTEGER */,
	state_leaktest: me.state_leaktest /* INTEGER */,
	recipe_lidopendelaytime: me.recipe_lidopendelaytime /* INTEGER */,
	config_productdirection: me.config_productdirection /* INTEGER */,
	config_preemptivetest: me.config_preemptivetest /* INTEGER */,
	rAirflow_Precutcylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Precutcylinders /* INTEGER */,
	param_utillizationright: me.infotable_ProductLoadDone.param_utillizationright /* INTEGER */,
	rLeak_VacuumPumpSide: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumPumpSide /* INTEGER */,
	param_leakmeasured: me.infotable_LeakHoldActive.param_leakmeasured /* INTEGER */,
	rLeak_VacuumChamber_Sealing: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Sealing /* INTEGER */,
	param_operationhours: me.param_operationhours /* INTEGER */,
	state_preemptivetest: me.state_preemptivetest /* INTEGER */,
	config_plc_prg: me.config_plc_prg /* INTEGER */,
	param_prodcountleft: me.param_prodcountleft /* INTEGER */,
	recipe_name: me.recipe_name /* INTEGER */,
	param_prodcountright: me.param_prodcountright /* INTEGER */,
	config_trimremovemonior: me.config_trimremovemonior /* INTEGER */,
	alarm_04: me.alarm_04 /* INTEGER */,
	recipe_vactime: me.recipe_vactime /* INTEGER */,
	alarm_05: me.alarm_05 /* INTEGER */,
	tVacuumLeaktestDuration: me.infotable_bPreemptiveDataAvailable.tVacuumLeaktestDuration /* INTEGER */,
	alarm_02: me.alarm_02 /* INTEGER */,
	param_leakpumpstate: me.param_leakpumpstate /* INTEGER */,
	alarm_03: me.alarm_03 /* INTEGER */,
	opmsg_beltspeedmed: me.opmsg_beltspeedmed /* INTEGER */,
	alarm_08: me.alarm_08 /* INTEGER */,
	recipe_vacprolongtime: me.recipe_vacprolongtime /* INTEGER */,
	param_pumphours: me.param_pumphours /* INTEGER */,
	param_vaccycletime: me.infotable_VacComplete.param_vaccycletime /* INTEGER */,
	rAirflow_BasePosition: me.infotable_bPreemptiveDataAvailable.rAirflow_BasePosition /* INTEGER */,
	recipe_productdetectionoffdelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	machineID: me.name /* STRING */,
	recipe_ultravactime: me.recipe_ultravactime /* INTEGER */,
	state_alarm: me.state_alarm /* INTEGER */,
	param_speedCPM: me.infotable_VacComplete.param_speedCPM /* INTEGER */,
	rAirflow_Chambercylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Chambercylinders /* INTEGER */,
	opmsg_beltspeedlow: me.opmsg_beltspeedlow /* INTEGER */,
	state_plcup: me.state_plcup /* INTEGER */,
	rAirflow_ReentryValve: me.infotable_bPreemptiveDataAvailable.rAirflow_ReentryValve /* INTEGER */,
	plcTimeStamp: dateFormat(currentTime,  "yyyy-MM-dd HH:mm:ss.SSS"),
	opmsg_bagdetectsensorright: me.opmsg_bagdetectsensorright /* INTEGER */,
	rLeak_VacuumChamber_Precut: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Precut /* INTEGER */,
	param_utillizationtotal: me.infotable_ProductLoadDone.param_utillizationtotal/* INTEGER */,
	param_productloaddone: me.param_productloaddone /* INTEGER */,
	config_exitsynchro: me.config_exitsynchro /* INTEGER */,
	recipe_vcsdeltatime: me.recipe_vcsdeltatime /* INTEGER */,
	rLeak_VacuumChamber_NoAction: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_NoAction /* INTEGER */,
	recipe_sealtimeleft: me.recipe_sealtimeleft /* INTEGER */,
	state_production: me.state_production /* INTEGER */,
	param_leaktestsource: me.param_leaktestsource /* INTEGER */,
	config_lineversion: me.config_lineversion /* INTEGER */,
	rAirflow_Sealing: me.infotable_bPreemptiveDataAvailable.rAirflow_Sealing /* INTEGER */,
	state_maintenance: me.state_maintenance /* INTEGER */,
	param_leakscantime: me.infotable_LeakHoldActive.param_leakscantime /* INTEGER */,
	param_vactimeprogress: me.param_vactimeprogress /* INTEGER */,
	param_prodcounttotal: me.param_prodcounttotal /* INTEGER */,
	recipe_vacmode: me.recipe_vacmode /* INTEGER */,
	opmsg_beltspeedhigh: me.opmsg_beltspeedhigh /* INTEGER */,
	state_downstreamRTR: me.state_downstreamRTR /* INTEGER */,
	recipe_sealtimeright: me.recipe_sealtimeright /* INTEGER */,
	recipe_vacholdtime: me.recipe_vacholdtime /* INTEGER */,
	param_speedcpm: me.infotable_VacComplete.param_speedcpm /* INTEGER */,
    state_run:me.state_run,
    param_cycletimestamp:me.infotable_VacComplete.param_cycletimestamp
};
//
me.insertDBRecord(params);
    
}
catch(e){
logger.error("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for state_cleaning - Exception "+e);    
}

logger.debug("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for state_cleaning - END "+me.name);]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></Subscription><Subscription enabled="true" eventName="DataChange" source="" sourceProperty="state_downstreamRTR"><ServiceImplementation description="" handlerName="Script" name="Event.DataChange:Property.state_downstreamRTR"><ConfigurationTables><ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[logger.debug("TT_RTTFT_VS95TS_V_0_0_1  Data Change subscription for state_downstreamRTR  - START");
try{

var currentTime = Date.now();
var params = {
	recipe_cooltime: me.recipe_cooltime /* INTEGER */,
	alarm_24: me.alarm_24 /* INTEGER */,
	recipe_prereentrytime: me.recipe_prereentrytime /* INTEGER */,
	recipe_productdetectionondelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	rAirflow_VacuumValve: me.infotable_bPreemptiveDataAvailable.rAirflow_VacuumValve /* INTEGER */,
	config_booster: me.config_booster /* INTEGER */,
	opmsg_bagdetectsensorleft: me.opmsg_bagdetectsensorleft /* INTEGER */,
	param_vacreached: me.infotable_VacComplete.param_vacreached /* INTEGER */,
	state_cleaning: me.state_cleaning /* INTEGER */,
	param_utillizationleft: me.infotable_ProductLoadDone.param_utillizationleft /* INTEGER */,
	config_exitconveyor: me.config_exitconveyor /* INTEGER */,
	config_profilbelt: me.config_profilbelt /* INTEGER */,
	state_upstreamRTS: me.state_upstreamRTS /* INTEGER */,
	config_cognipro: me.config_cognipro /* INTEGER */,
	param_lifetimecycles: me.infotable_VacComplete.param_lifetimecycles /* INTEGER */,
	recipe_vactarget: me.recipe_vactarget /* INTEGER */,
	config_centralvac: me.config_centralvac /* INTEGER */,
	recipe_ultravacdelaytime: me.recipe_ultravacdelaytime /* INTEGER */,
	param_vac: me.param_vac /* INTEGER */,
	param_vaccomplete: me.param_vaccomplete /* INTEGER */,
	param_leakholdactive: me.param_leakholdactive /* INTEGER */,
	tVacuumDrawingTimeSeconds: me.infotable_bPreemptiveDataAvailable.tVacuumDrawingTimeSeconds /* INTEGER */,
	param_vacabort: me.param_vacabort /* INTEGER */,
	config_sealheightadj: me.config_sealheightadj /* INTEGER */,
	alarm_20: me.alarm_20 /* INTEGER */,
	state_stop: me.state_stop /* INTEGER */,
	rAirflow_Tensioning: me.infotable_bPreemptiveDataAvailable.rAirflow_Tensioning /* INTEGER */,
	state_leaktest: me.state_leaktest /* INTEGER */,
	recipe_lidopendelaytime: me.recipe_lidopendelaytime /* INTEGER */,
	config_productdirection: me.config_productdirection /* INTEGER */,
	config_preemptivetest: me.config_preemptivetest /* INTEGER */,
	rAirflow_Precutcylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Precutcylinders /* INTEGER */,
	param_utillizationright: me.infotable_ProductLoadDone.param_utillizationright /* INTEGER */,
	rLeak_VacuumPumpSide: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumPumpSide /* INTEGER */,
	param_leakmeasured: me.infotable_LeakHoldActive.param_leakmeasured /* INTEGER */,
	rLeak_VacuumChamber_Sealing: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Sealing /* INTEGER */,
	param_operationhours: me.param_operationhours /* INTEGER */,
	state_preemptivetest: me.state_preemptivetest /* INTEGER */,
	config_plc_prg: me.config_plc_prg /* INTEGER */,
	param_prodcountleft: me.param_prodcountleft /* INTEGER */,
	recipe_name: me.recipe_name /* INTEGER */,
	param_prodcountright: me.param_prodcountright /* INTEGER */,
	config_trimremovemonior: me.config_trimremovemonior /* INTEGER */,
	alarm_04: me.alarm_04 /* INTEGER */,
	recipe_vactime: me.recipe_vactime /* INTEGER */,
	alarm_05: me.alarm_05 /* INTEGER */,
	tVacuumLeaktestDuration: me.infotable_bPreemptiveDataAvailable.tVacuumLeaktestDuration /* INTEGER */,
	alarm_02: me.alarm_02 /* INTEGER */,
	param_leakpumpstate: me.param_leakpumpstate /* INTEGER */,
	alarm_03: me.alarm_03 /* INTEGER */,
	opmsg_beltspeedmed: me.opmsg_beltspeedmed /* INTEGER */,
	alarm_08: me.alarm_08 /* INTEGER */,
	recipe_vacprolongtime: me.recipe_vacprolongtime /* INTEGER */,
	param_pumphours: me.param_pumphours /* INTEGER */,
	param_vaccycletime: me.infotable_VacComplete.param_vaccycletime /* INTEGER */,
	rAirflow_BasePosition: me.infotable_bPreemptiveDataAvailable.rAirflow_BasePosition /* INTEGER */,
	recipe_productdetectionoffdelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	machineID: me.name /* STRING */,
	recipe_ultravactime: me.recipe_ultravactime /* INTEGER */,
	state_alarm: me.state_alarm /* INTEGER */,
	param_speedCPM: me.infotable_VacComplete.param_speedCPM /* INTEGER */,
	rAirflow_Chambercylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Chambercylinders /* INTEGER */,
	opmsg_beltspeedlow: me.opmsg_beltspeedlow /* INTEGER */,
	state_plcup: me.state_plcup /* INTEGER */,
	rAirflow_ReentryValve: me.infotable_bPreemptiveDataAvailable.rAirflow_ReentryValve /* INTEGER */,
	plcTimeStamp: dateFormat(currentTime,  "yyyy-MM-dd HH:mm:ss.SSS"),
	opmsg_bagdetectsensorright: me.opmsg_bagdetectsensorright /* INTEGER */,
	rLeak_VacuumChamber_Precut: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Precut /* INTEGER */,
	param_utillizationtotal: me.infotable_ProductLoadDone.param_utillizationtotal/* INTEGER */,
	param_productloaddone: me.param_productloaddone /* INTEGER */,
	config_exitsynchro: me.config_exitsynchro /* INTEGER */,
	recipe_vcsdeltatime: me.recipe_vcsdeltatime /* INTEGER */,
	rLeak_VacuumChamber_NoAction: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_NoAction /* INTEGER */,
	recipe_sealtimeleft: me.recipe_sealtimeleft /* INTEGER */,
	state_production: me.state_production /* INTEGER */,
	param_leaktestsource: me.param_leaktestsource /* INTEGER */,
	config_lineversion: me.config_lineversion /* INTEGER */,
	rAirflow_Sealing: me.infotable_bPreemptiveDataAvailable.rAirflow_Sealing /* INTEGER */,
	state_maintenance: me.state_maintenance /* INTEGER */,
	param_leakscantime: me.infotable_LeakHoldActive.param_leakscantime /* INTEGER */,
	param_vactimeprogress: me.param_vactimeprogress /* INTEGER */,
	param_prodcounttotal: me.param_prodcounttotal /* INTEGER */,
	recipe_vacmode: me.recipe_vacmode /* INTEGER */,
	opmsg_beltspeedhigh: me.opmsg_beltspeedhigh /* INTEGER */,
	state_downstreamRTR: me.state_downstreamRTR /* INTEGER */,
	recipe_sealtimeright: me.recipe_sealtimeright /* INTEGER */,
	recipe_vacholdtime: me.recipe_vacholdtime /* INTEGER */,
	param_speedcpm: me.infotable_VacComplete.param_speedcpm /* INTEGER */,
    state_run:me.state_run,
    param_cycletimestamp:me.infotable_VacComplete.param_cycletimestamp
};
//
me.insertDBRecord(params);
    
}
catch(e){
logger.error("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for state_downstreamRTR - Exception "+e);    
}

logger.debug("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for state_downstreamRTR - END");]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></Subscription><Subscription enabled="true" eventName="DataChange" source="" sourceProperty="state_leaktest"><ServiceImplementation description="" handlerName="Script" name="Event.DataChange:Property.state_leaktest"><ConfigurationTables><ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[logger.debug("TT_RTTFT_VS95TS_V_0_0_1  Data Change subscription for state_leaktest  - START "+me.name);
try{

var currentTime = Date.now();
var params = {
	recipe_cooltime: me.recipe_cooltime /* INTEGER */,
	alarm_24: me.alarm_24 /* INTEGER */,
	recipe_prereentrytime: me.recipe_prereentrytime /* INTEGER */,
	recipe_productdetectionondelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	rAirflow_VacuumValve: me.infotable_bPreemptiveDataAvailable.rAirflow_VacuumValve /* INTEGER */,
	config_booster: me.config_booster /* INTEGER */,
	opmsg_bagdetectsensorleft: me.opmsg_bagdetectsensorleft /* INTEGER */,
	param_vacreached: me.infotable_VacComplete.param_vacreached /* INTEGER */,
	state_cleaning: me.state_cleaning /* INTEGER */,
	param_utillizationleft: me.infotable_ProductLoadDone.param_utillizationleft /* INTEGER */,
	config_exitconveyor: me.config_exitconveyor /* INTEGER */,
	config_profilbelt: me.config_profilbelt /* INTEGER */,
	state_upstreamRTS: me.state_upstreamRTS /* INTEGER */,
	config_cognipro: me.config_cognipro /* INTEGER */,
	param_lifetimecycles: me.infotable_VacComplete.param_lifetimecycles /* INTEGER */,
	recipe_vactarget: me.recipe_vactarget /* INTEGER */,
	config_centralvac: me.config_centralvac /* INTEGER */,
	recipe_ultravacdelaytime: me.recipe_ultravacdelaytime /* INTEGER */,
	param_vac: me.param_vac /* INTEGER */,
	param_vaccomplete: me.param_vaccomplete /* INTEGER */,
	param_leakholdactive: me.param_leakholdactive /* INTEGER */,
	tVacuumDrawingTimeSeconds: me.infotable_bPreemptiveDataAvailable.tVacuumDrawingTimeSeconds /* INTEGER */,
	param_vacabort: me.param_vacabort /* INTEGER */,
	config_sealheightadj: me.config_sealheightadj /* INTEGER */,
	alarm_20: me.alarm_20 /* INTEGER */,
	state_stop: me.state_stop /* INTEGER */,
	rAirflow_Tensioning: me.infotable_bPreemptiveDataAvailable.rAirflow_Tensioning /* INTEGER */,
	state_leaktest: eventData.newValue.value /* INTEGER */,
	recipe_lidopendelaytime: me.recipe_lidopendelaytime /* INTEGER */,
	config_productdirection: me.config_productdirection /* INTEGER */,
	config_preemptivetest: me.config_preemptivetest /* INTEGER */,
	rAirflow_Precutcylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Precutcylinders /* INTEGER */,
	param_utillizationright: me.infotable_ProductLoadDone.param_utillizationright /* INTEGER */,
	rLeak_VacuumPumpSide: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumPumpSide /* INTEGER */,
	param_leakmeasured: me.infotable_LeakHoldActive.param_leakmeasured /* INTEGER */,
	rLeak_VacuumChamber_Sealing: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Sealing /* INTEGER */,
	param_operationhours: me.param_operationhours /* INTEGER */,
	state_preemptivetest: me.state_preemptivetest /* INTEGER */,
	config_plc_prg: me.config_plc_prg /* INTEGER */,
	param_prodcountleft: me.param_prodcountleft /* INTEGER */,
	recipe_name: me.recipe_name /* INTEGER */,
	param_prodcountright: me.param_prodcountright /* INTEGER */,
	config_trimremovemonior: me.config_trimremovemonior /* INTEGER */,
	alarm_04: me.alarm_04 /* INTEGER */,
	recipe_vactime: me.recipe_vactime /* INTEGER */,
	alarm_05: me.alarm_05 /* INTEGER */,
	tVacuumLeaktestDuration: me.infotable_bPreemptiveDataAvailable.tVacuumLeaktestDuration /* INTEGER */,
	alarm_02: me.alarm_02 /* INTEGER */,
	param_leakpumpstate: me.param_leakpumpstate /* INTEGER */,
	alarm_03: me.alarm_03 /* INTEGER */,
	opmsg_beltspeedmed: me.opmsg_beltspeedmed /* INTEGER */,
	alarm_08: me.alarm_08 /* INTEGER */,
	recipe_vacprolongtime: me.recipe_vacprolongtime /* INTEGER */,
	param_pumphours: me.param_pumphours /* INTEGER */,
	param_vaccycletime: me.infotable_VacComplete.param_vaccycletime /* INTEGER */,
	rAirflow_BasePosition: me.infotable_bPreemptiveDataAvailable.rAirflow_BasePosition /* INTEGER */,
	recipe_productdetectionoffdelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	machineID: me.name /* STRING */,
	recipe_ultravactime: me.recipe_ultravactime /* INTEGER */,
	state_alarm: me.state_alarm /* INTEGER */,
	param_speedCPM: me.infotable_VacComplete.param_speedCPM /* INTEGER */,
	rAirflow_Chambercylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Chambercylinders /* INTEGER */,
	opmsg_beltspeedlow: me.opmsg_beltspeedlow /* INTEGER */,
	state_plcup: me.state_plcup /* INTEGER */,
	rAirflow_ReentryValve: me.infotable_bPreemptiveDataAvailable.rAirflow_ReentryValve /* INTEGER */,
	plcTimeStamp: dateFormat(currentTime,  "yyyy-MM-dd HH:mm:ss.SSS"),
	opmsg_bagdetectsensorright: me.opmsg_bagdetectsensorright /* INTEGER */,
	rLeak_VacuumChamber_Precut: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Precut /* INTEGER */,
	param_utillizationtotal: me.infotable_ProductLoadDone.param_utillizationtotal/* INTEGER */,
	param_productloaddone: me.param_productloaddone /* INTEGER */,
	config_exitsynchro: me.config_exitsynchro /* INTEGER */,
	recipe_vcsdeltatime: me.recipe_vcsdeltatime /* INTEGER */,
	rLeak_VacuumChamber_NoAction: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_NoAction /* INTEGER */,
	recipe_sealtimeleft: me.recipe_sealtimeleft /* INTEGER */,
	state_production: me.state_production /* INTEGER */,
	param_leaktestsource: me.param_leaktestsource /* INTEGER */,
	config_lineversion: me.config_lineversion /* INTEGER */,
	rAirflow_Sealing: me.infotable_bPreemptiveDataAvailable.rAirflow_Sealing /* INTEGER */,
	state_maintenance: me.state_maintenance /* INTEGER */,
	param_leakscantime: me.infotable_LeakHoldActive.param_leakscantime /* INTEGER */,
	param_vactimeprogress: me.param_vactimeprogress /* INTEGER */,
	param_prodcounttotal: me.param_prodcounttotal /* INTEGER */,
	recipe_vacmode: me.recipe_vacmode /* INTEGER */,
	opmsg_beltspeedhigh: me.opmsg_beltspeedhigh /* INTEGER */,
	state_downstreamRTR: me.state_downstreamRTR /* INTEGER */,
	recipe_sealtimeright: me.recipe_sealtimeright /* INTEGER */,
	recipe_vacholdtime: me.recipe_vacholdtime /* INTEGER */,
	param_speedcpm: me.infotable_VacComplete.param_speedcpm /* INTEGER */,
    state_run:me.state_run,
    param_cycletimestamp:me.infotable_VacComplete.param_cycletimestamp
};
//
me.insertDBRecord(params);
    
}
catch(e){
logger.error("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for state_leaktest - Exception "+e);    
}

logger.debug("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for state_leaktest - END " +me.name);]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></Subscription><Subscription enabled="true" eventName="DataChange" source="" sourceProperty="state_maintenance"><ServiceImplementation description="" handlerName="Script" name="Event.DataChange:Property.state_maintenance"><ConfigurationTables><ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[logger.debug("TT_RTTFT_VS95TS_V_0_0_1  Data Change subscription for state_maintenance  - START");
try{

var currentTime = Date.now();
var params = {
	recipe_cooltime: me.recipe_cooltime /* INTEGER */,
	alarm_24: me.alarm_24 /* INTEGER */,
	recipe_prereentrytime: me.recipe_prereentrytime /* INTEGER */,
	recipe_productdetectionondelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	rAirflow_VacuumValve: me.infotable_bPreemptiveDataAvailable.rAirflow_VacuumValve /* INTEGER */,
	config_booster: me.config_booster /* INTEGER */,
	opmsg_bagdetectsensorleft: me.opmsg_bagdetectsensorleft /* INTEGER */,
	param_vacreached: me.infotable_VacComplete.param_vacreached /* INTEGER */,
	state_cleaning: me.state_cleaning /* INTEGER */,
	param_utillizationleft: me.infotable_ProductLoadDone.param_utillizationleft /* INTEGER */,
	config_exitconveyor: me.config_exitconveyor /* INTEGER */,
	config_profilbelt: me.config_profilbelt /* INTEGER */,
	state_upstreamRTS: me.state_upstreamRTS /* INTEGER */,
	config_cognipro: me.config_cognipro /* INTEGER */,
	param_lifetimecycles: me.infotable_VacComplete.param_lifetimecycles /* INTEGER */,
	recipe_vactarget: me.recipe_vactarget /* INTEGER */,
	config_centralvac: me.config_centralvac /* INTEGER */,
	recipe_ultravacdelaytime: me.recipe_ultravacdelaytime /* INTEGER */,
	param_vac: me.param_vac /* INTEGER */,
	param_vaccomplete: me.param_vaccomplete /* INTEGER */,
	param_leakholdactive: me.param_leakholdactive /* INTEGER */,
	tVacuumDrawingTimeSeconds: me.infotable_bPreemptiveDataAvailable.tVacuumDrawingTimeSeconds /* INTEGER */,
	param_vacabort: me.param_vacabort /* INTEGER */,
	config_sealheightadj: me.config_sealheightadj /* INTEGER */,
	alarm_20: me.alarm_20 /* INTEGER */,
	state_stop: me.state_stop /* INTEGER */,
	rAirflow_Tensioning: me.infotable_bPreemptiveDataAvailable.rAirflow_Tensioning /* INTEGER */,
	state_leaktest: me.state_leaktest /* INTEGER */,
	recipe_lidopendelaytime: me.recipe_lidopendelaytime /* INTEGER */,
	config_productdirection: me.config_productdirection /* INTEGER */,
	config_preemptivetest: me.config_preemptivetest /* INTEGER */,
	rAirflow_Precutcylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Precutcylinders /* INTEGER */,
	param_utillizationright: me.infotable_ProductLoadDone.param_utillizationright /* INTEGER */,
	rLeak_VacuumPumpSide: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumPumpSide /* INTEGER */,
	param_leakmeasured: me.infotable_LeakHoldActive.param_leakmeasured /* INTEGER */,
	rLeak_VacuumChamber_Sealing: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Sealing /* INTEGER */,
	param_operationhours: me.param_operationhours /* INTEGER */,
	state_preemptivetest: me.state_preemptivetest /* INTEGER */,
	config_plc_prg: me.config_plc_prg /* INTEGER */,
	param_prodcountleft: me.param_prodcountleft /* INTEGER */,
	recipe_name: me.recipe_name /* INTEGER */,
	param_prodcountright: me.param_prodcountright /* INTEGER */,
	config_trimremovemonior: me.config_trimremovemonior /* INTEGER */,
	alarm_04: me.alarm_04 /* INTEGER */,
	recipe_vactime: me.recipe_vactime /* INTEGER */,
	alarm_05: me.alarm_05 /* INTEGER */,
	tVacuumLeaktestDuration: me.infotable_bPreemptiveDataAvailable.tVacuumLeaktestDuration /* INTEGER */,
	alarm_02: me.alarm_02 /* INTEGER */,
	param_leakpumpstate: me.param_leakpumpstate /* INTEGER */,
	alarm_03: me.alarm_03 /* INTEGER */,
	opmsg_beltspeedmed: me.opmsg_beltspeedmed /* INTEGER */,
	alarm_08: me.alarm_08 /* INTEGER */,
	recipe_vacprolongtime: me.recipe_vacprolongtime /* INTEGER */,
	param_pumphours: me.param_pumphours /* INTEGER */,
	param_vaccycletime: me.infotable_VacComplete.param_vaccycletime /* INTEGER */,
	rAirflow_BasePosition: me.infotable_bPreemptiveDataAvailable.rAirflow_BasePosition /* INTEGER */,
	recipe_productdetectionoffdelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	machineID: me.name /* STRING */,
	recipe_ultravactime: me.recipe_ultravactime /* INTEGER */,
	state_alarm: me.state_alarm /* INTEGER */,
	param_speedCPM: me.infotable_VacComplete.param_speedCPM /* INTEGER */,
	rAirflow_Chambercylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Chambercylinders /* INTEGER */,
	opmsg_beltspeedlow: me.opmsg_beltspeedlow /* INTEGER */,
	state_plcup: me.state_plcup /* INTEGER */,
	rAirflow_ReentryValve: me.infotable_bPreemptiveDataAvailable.rAirflow_ReentryValve /* INTEGER */,
	plcTimeStamp: dateFormat(currentTime,  "yyyy-MM-dd HH:mm:ss.SSS"),
	opmsg_bagdetectsensorright: me.opmsg_bagdetectsensorright /* INTEGER */,
	rLeak_VacuumChamber_Precut: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Precut /* INTEGER */,
	param_utillizationtotal: me.infotable_ProductLoadDone.param_utillizationtotal/* INTEGER */,
	param_productloaddone: me.param_productloaddone /* INTEGER */,
	config_exitsynchro: me.config_exitsynchro /* INTEGER */,
	recipe_vcsdeltatime: me.recipe_vcsdeltatime /* INTEGER */,
	rLeak_VacuumChamber_NoAction: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_NoAction /* INTEGER */,
	recipe_sealtimeleft: me.recipe_sealtimeleft /* INTEGER */,
	state_production: me.state_production /* INTEGER */,
	param_leaktestsource: me.param_leaktestsource /* INTEGER */,
	config_lineversion: me.config_lineversion /* INTEGER */,
	rAirflow_Sealing: me.infotable_bPreemptiveDataAvailable.rAirflow_Sealing /* INTEGER */,
	state_maintenance: me.state_maintenance /* INTEGER */,
	param_leakscantime: me.infotable_LeakHoldActive.param_leakscantime /* INTEGER */,
	param_vactimeprogress: me.param_vactimeprogress /* INTEGER */,
	param_prodcounttotal: me.param_prodcounttotal /* INTEGER */,
	recipe_vacmode: me.recipe_vacmode /* INTEGER */,
	opmsg_beltspeedhigh: me.opmsg_beltspeedhigh /* INTEGER */,
	state_downstreamRTR: me.state_downstreamRTR /* INTEGER */,
	recipe_sealtimeright: me.recipe_sealtimeright /* INTEGER */,
	recipe_vacholdtime: me.recipe_vacholdtime /* INTEGER */,
	param_speedcpm: me.infotable_VacComplete.param_speedcpm /* INTEGER */,
    state_run:me.state_run,
    param_cycletimestamp:me.infotable_VacComplete.param_cycletimestamp
};
//
me.insertDBRecord(params);
    
}
catch(e){
logger.error("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for state_maintenance - Exception "+e);    
}

logger.debug("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for state_maintenance - END");]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></Subscription><Subscription enabled="true" eventName="DataChange" source="" sourceProperty="state_plcup"><ServiceImplementation description="" handlerName="Script" name="Event.DataChange:Property.state_plcup"><ConfigurationTables><ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[logger.debug("TT_RTTFT_VS95TS_V_0_0_1  Data Change subscription for state_plcup  - START "+me.name);
try{

var currentTime = Date.now();
var params = {
	recipe_cooltime: me.recipe_cooltime /* INTEGER */,
	alarm_24: me.alarm_24 /* INTEGER */,
	recipe_prereentrytime: me.recipe_prereentrytime /* INTEGER */,
	recipe_productdetectionondelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	rAirflow_VacuumValve: me.infotable_bPreemptiveDataAvailable.rAirflow_VacuumValve /* INTEGER */,
	config_booster: me.config_booster /* INTEGER */,
	opmsg_bagdetectsensorleft: me.opmsg_bagdetectsensorleft /* INTEGER */,
	param_vacreached: me.infotable_VacComplete.param_vacreached /* INTEGER */,
	state_cleaning: me.state_cleaning /* INTEGER */,
	param_utillizationleft: me.infotable_ProductLoadDone.param_utillizationleft /* INTEGER */,
	config_exitconveyor: me.config_exitconveyor /* INTEGER */,
	config_profilbelt: me.config_profilbelt /* INTEGER */,
	state_upstreamRTS: me.state_upstreamRTS /* INTEGER */,
	config_cognipro: me.config_cognipro /* INTEGER */,
	param_lifetimecycles: me.infotable_VacComplete.param_lifetimecycles /* INTEGER */,
	recipe_vactarget: me.recipe_vactarget /* INTEGER */,
	config_centralvac: me.config_centralvac /* INTEGER */,
	recipe_ultravacdelaytime: me.recipe_ultravacdelaytime /* INTEGER */,
	param_vac: me.param_vac /* INTEGER */,
	param_vaccomplete: me.param_vaccomplete /* INTEGER */,
	param_leakholdactive: me.param_leakholdactive /* INTEGER */,
	tVacuumDrawingTimeSeconds: me.infotable_bPreemptiveDataAvailable.tVacuumDrawingTimeSeconds /* INTEGER */,
	param_vacabort: me.param_vacabort /* INTEGER */,
	config_sealheightadj: me.config_sealheightadj /* INTEGER */,
	alarm_20: me.alarm_20 /* INTEGER */,
	state_stop: me.state_stop /* INTEGER */,
	rAirflow_Tensioning: me.infotable_bPreemptiveDataAvailable.rAirflow_Tensioning /* INTEGER */,
	state_leaktest: me.state_leaktest /* INTEGER */,
	recipe_lidopendelaytime: me.recipe_lidopendelaytime /* INTEGER */,
	config_productdirection: me.config_productdirection /* INTEGER */,
	config_preemptivetest: me.config_preemptivetest /* INTEGER */,
	rAirflow_Precutcylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Precutcylinders /* INTEGER */,
	param_utillizationright: me.infotable_ProductLoadDone.param_utillizationright /* INTEGER */,
	rLeak_VacuumPumpSide: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumPumpSide /* INTEGER */,
	param_leakmeasured: me.infotable_LeakHoldActive.param_leakmeasured /* INTEGER */,
	rLeak_VacuumChamber_Sealing: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Sealing /* INTEGER */,
	param_operationhours: me.param_operationhours /* INTEGER */,
	state_preemptivetest: me.state_preemptivetest /* INTEGER */,
	config_plc_prg: me.config_plc_prg /* INTEGER */,
	param_prodcountleft: me.param_prodcountleft /* INTEGER */,
	recipe_name: me.recipe_name /* INTEGER */,
	param_prodcountright: me.param_prodcountright /* INTEGER */,
	config_trimremovemonior: me.config_trimremovemonior /* INTEGER */,
	alarm_04: me.alarm_04 /* INTEGER */,
	recipe_vactime: me.recipe_vactime /* INTEGER */,
	alarm_05: me.alarm_05 /* INTEGER */,
	tVacuumLeaktestDuration: me.infotable_bPreemptiveDataAvailable.tVacuumLeaktestDuration /* INTEGER */,
	alarm_02: me.alarm_02 /* INTEGER */,
	param_leakpumpstate: me.param_leakpumpstate /* INTEGER */,
	alarm_03: me.alarm_03 /* INTEGER */,
	opmsg_beltspeedmed: me.opmsg_beltspeedmed /* INTEGER */,
	alarm_08: me.alarm_08 /* INTEGER */,
	recipe_vacprolongtime: me.recipe_vacprolongtime /* INTEGER */,
	param_pumphours: me.param_pumphours /* INTEGER */,
	param_vaccycletime: me.infotable_VacComplete.param_vaccycletime /* INTEGER */,
	rAirflow_BasePosition: me.infotable_bPreemptiveDataAvailable.rAirflow_BasePosition /* INTEGER */,
	recipe_productdetectionoffdelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	machineID: me.name /* STRING */,
	recipe_ultravactime: me.recipe_ultravactime /* INTEGER */,
	state_alarm: me.state_alarm /* INTEGER */,
	param_speedCPM: me.infotable_VacComplete.param_speedCPM /* INTEGER */,
	rAirflow_Chambercylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Chambercylinders /* INTEGER */,
	opmsg_beltspeedlow: me.opmsg_beltspeedlow /* INTEGER */,
	state_plcup: eventData.newValue.value /* INTEGER */,
	rAirflow_ReentryValve: me.infotable_bPreemptiveDataAvailable.rAirflow_ReentryValve /* INTEGER */,
	plcTimeStamp: dateFormat(currentTime,  "yyyy-MM-dd HH:mm:ss.SSS"),
	opmsg_bagdetectsensorright: me.opmsg_bagdetectsensorright /* INTEGER */,
	rLeak_VacuumChamber_Precut: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Precut /* INTEGER */,
	param_utillizationtotal: me.infotable_ProductLoadDone.param_utillizationtotal/* INTEGER */,
	param_productloaddone: me.param_productloaddone /* INTEGER */,
	config_exitsynchro: me.config_exitsynchro /* INTEGER */,
	recipe_vcsdeltatime: me.recipe_vcsdeltatime /* INTEGER */,
	rLeak_VacuumChamber_NoAction: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_NoAction /* INTEGER */,
	recipe_sealtimeleft: me.recipe_sealtimeleft /* INTEGER */,
	state_production: me.state_production /* INTEGER */,
	param_leaktestsource: me.param_leaktestsource /* INTEGER */,
	config_lineversion: me.config_lineversion /* INTEGER */,
	rAirflow_Sealing: me.infotable_bPreemptiveDataAvailable.rAirflow_Sealing /* INTEGER */,
	state_maintenance: me.state_maintenance /* INTEGER */,
	param_leakscantime: me.infotable_LeakHoldActive.param_leakscantime /* INTEGER */,
	param_vactimeprogress: me.param_vactimeprogress /* INTEGER */,
	param_prodcounttotal: me.param_prodcounttotal /* INTEGER */,
	recipe_vacmode: me.recipe_vacmode /* INTEGER */,
	opmsg_beltspeedhigh: me.opmsg_beltspeedhigh /* INTEGER */,
	state_downstreamRTR: me.state_downstreamRTR /* INTEGER */,
	recipe_sealtimeright: me.recipe_sealtimeright /* INTEGER */,
	recipe_vacholdtime: me.recipe_vacholdtime /* INTEGER */,
	param_speedcpm: me.infotable_VacComplete.param_speedcpm /* INTEGER */,
    state_run:me.state_run,
    param_cycletimestamp:me.infotable_VacComplete.param_cycletimestamp
};
//
me.insertDBRecord(params);
    
}
catch(e){
logger.error("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for state_plcup - Exception "+e);    
}

logger.debug("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for state_plcup - END "+me.name);]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></Subscription><Subscription enabled="true" eventName="DataChange" source="" sourceProperty="state_preemptivetest"><ServiceImplementation description="" handlerName="Script" name="Event.DataChange:Property.state_preemptivetest"><ConfigurationTables><ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[logger.debug("TT_RTTFT_VS95TS_V_0_0_1  Data Change subscription for state_preemptivetest  - START");
try{

var currentTime = Date.now();
var params = {
	recipe_cooltime: me.recipe_cooltime /* INTEGER */,
	alarm_24: me.alarm_24 /* INTEGER */,
	recipe_prereentrytime: me.recipe_prereentrytime /* INTEGER */,
	recipe_productdetectionondelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	rAirflow_VacuumValve: me.infotable_bPreemptiveDataAvailable.rAirflow_VacuumValve /* INTEGER */,
	config_booster: me.config_booster /* INTEGER */,
	opmsg_bagdetectsensorleft: me.opmsg_bagdetectsensorleft /* INTEGER */,
	param_vacreached: me.infotable_VacComplete.param_vacreached /* INTEGER */,
	state_cleaning: me.state_cleaning /* INTEGER */,
	param_utillizationleft: me.infotable_ProductLoadDone.param_utillizationleft /* INTEGER */,
	config_exitconveyor: me.config_exitconveyor /* INTEGER */,
	config_profilbelt: me.config_profilbelt /* INTEGER */,
	state_upstreamRTS: me.state_upstreamRTS /* INTEGER */,
	config_cognipro: me.config_cognipro /* INTEGER */,
	param_lifetimecycles: me.infotable_VacComplete.param_lifetimecycles /* INTEGER */,
	recipe_vactarget: me.recipe_vactarget /* INTEGER */,
	config_centralvac: me.config_centralvac /* INTEGER */,
	recipe_ultravacdelaytime: me.recipe_ultravacdelaytime /* INTEGER */,
	param_vac: me.param_vac /* INTEGER */,
	param_vaccomplete: me.param_vaccomplete /* INTEGER */,
	param_leakholdactive: me.param_leakholdactive /* INTEGER */,
	tVacuumDrawingTimeSeconds: me.infotable_bPreemptiveDataAvailable.tVacuumDrawingTimeSeconds /* INTEGER */,
	param_vacabort: me.param_vacabort /* INTEGER */,
	config_sealheightadj: me.config_sealheightadj /* INTEGER */,
	alarm_20: me.alarm_20 /* INTEGER */,
	state_stop: me.state_stop /* INTEGER */,
	rAirflow_Tensioning: me.infotable_bPreemptiveDataAvailable.rAirflow_Tensioning /* INTEGER */,
	state_leaktest: me.state_leaktest /* INTEGER */,
	recipe_lidopendelaytime: me.recipe_lidopendelaytime /* INTEGER */,
	config_productdirection: me.config_productdirection /* INTEGER */,
	config_preemptivetest: me.config_preemptivetest /* INTEGER */,
	rAirflow_Precutcylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Precutcylinders /* INTEGER */,
	param_utillizationright: me.infotable_ProductLoadDone.param_utillizationright /* INTEGER */,
	rLeak_VacuumPumpSide: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumPumpSide /* INTEGER */,
	param_leakmeasured: me.infotable_LeakHoldActive.param_leakmeasured /* INTEGER */,
	rLeak_VacuumChamber_Sealing: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Sealing /* INTEGER */,
	param_operationhours: me.param_operationhours /* INTEGER */,
	state_preemptivetest: me.state_preemptivetest /* INTEGER */,
	config_plc_prg: me.config_plc_prg /* INTEGER */,
	param_prodcountleft: me.param_prodcountleft /* INTEGER */,
	recipe_name: me.recipe_name /* INTEGER */,
	param_prodcountright: me.param_prodcountright /* INTEGER */,
	config_trimremovemonior: me.config_trimremovemonior /* INTEGER */,
	alarm_04: me.alarm_04 /* INTEGER */,
	recipe_vactime: me.recipe_vactime /* INTEGER */,
	alarm_05: me.alarm_05 /* INTEGER */,
	tVacuumLeaktestDuration: me.infotable_bPreemptiveDataAvailable.tVacuumLeaktestDuration /* INTEGER */,
	alarm_02: me.alarm_02 /* INTEGER */,
	param_leakpumpstate: me.param_leakpumpstate /* INTEGER */,
	alarm_03: me.alarm_03 /* INTEGER */,
	opmsg_beltspeedmed: me.opmsg_beltspeedmed /* INTEGER */,
	alarm_08: me.alarm_08 /* INTEGER */,
	recipe_vacprolongtime: me.recipe_vacprolongtime /* INTEGER */,
	param_pumphours: me.param_pumphours /* INTEGER */,
	param_vaccycletime: me.infotable_VacComplete.param_vaccycletime /* INTEGER */,
	rAirflow_BasePosition: me.infotable_bPreemptiveDataAvailable.rAirflow_BasePosition /* INTEGER */,
	recipe_productdetectionoffdelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	machineID: me.name /* STRING */,
	recipe_ultravactime: me.recipe_ultravactime /* INTEGER */,
	state_alarm: me.state_alarm /* INTEGER */,
	param_speedCPM: me.infotable_VacComplete.param_speedCPM /* INTEGER */,
	rAirflow_Chambercylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Chambercylinders /* INTEGER */,
	opmsg_beltspeedlow: me.opmsg_beltspeedlow /* INTEGER */,
	state_plcup: me.state_plcup /* INTEGER */,
	rAirflow_ReentryValve: me.infotable_bPreemptiveDataAvailable.rAirflow_ReentryValve /* INTEGER */,
	plcTimeStamp: dateFormat(currentTime,  "yyyy-MM-dd HH:mm:ss.SSS"),
	opmsg_bagdetectsensorright: me.opmsg_bagdetectsensorright /* INTEGER */,
	rLeak_VacuumChamber_Precut: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Precut /* INTEGER */,
	param_utillizationtotal: me.infotable_ProductLoadDone.param_utillizationtotal/* INTEGER */,
	param_productloaddone: me.param_productloaddone /* INTEGER */,
	config_exitsynchro: me.config_exitsynchro /* INTEGER */,
	recipe_vcsdeltatime: me.recipe_vcsdeltatime /* INTEGER */,
	rLeak_VacuumChamber_NoAction: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_NoAction /* INTEGER */,
	recipe_sealtimeleft: me.recipe_sealtimeleft /* INTEGER */,
	state_production: me.state_production /* INTEGER */,
	param_leaktestsource: me.param_leaktestsource /* INTEGER */,
	config_lineversion: me.config_lineversion /* INTEGER */,
	rAirflow_Sealing: me.infotable_bPreemptiveDataAvailable.rAirflow_Sealing /* INTEGER */,
	state_maintenance: me.state_maintenance /* INTEGER */,
	param_leakscantime: me.infotable_LeakHoldActive.param_leakscantime /* INTEGER */,
	param_vactimeprogress: me.param_vactimeprogress /* INTEGER */,
	param_prodcounttotal: me.param_prodcounttotal /* INTEGER */,
	recipe_vacmode: me.recipe_vacmode /* INTEGER */,
	opmsg_beltspeedhigh: me.opmsg_beltspeedhigh /* INTEGER */,
	state_downstreamRTR: me.state_downstreamRTR /* INTEGER */,
	recipe_sealtimeright: me.recipe_sealtimeright /* INTEGER */,
	recipe_vacholdtime: me.recipe_vacholdtime /* INTEGER */,
	param_speedcpm: me.infotable_VacComplete.param_speedcpm /* INTEGER */,
    state_run:me.state_run,
    param_cycletimestamp:me.infotable_VacComplete.param_cycletimestamp
};
//
me.insertDBRecord(params);
    
}
catch(e){
logger.error("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for state_preemotivetest - Exception "+e);    
}

logger.debug("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for state_preemotivetest - END");]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></Subscription><Subscription enabled="true" eventName="DataChange" source="" sourceProperty="state_production"><ServiceImplementation description="" handlerName="Script" name="Event.DataChange:Property.state_production"><ConfigurationTables><ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[logger.debug("TT_RTTFT_VS95TS_V_0_0_1  Data Change subscription for state_production - START");
try{

var currentTime = Date.now();
var params = {
	recipe_cooltime: me.recipe_cooltime /* INTEGER */,
	alarm_24: me.alarm_24 /* INTEGER */,
	recipe_prereentrytime: me.recipe_prereentrytime /* INTEGER */,
	recipe_productdetectionondelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	rAirflow_VacuumValve: me.infotable_bPreemptiveDataAvailable.rAirflow_VacuumValve /* INTEGER */,
	config_booster: me.config_booster /* INTEGER */,
	opmsg_bagdetectsensorleft: me.opmsg_bagdetectsensorleft /* INTEGER */,
	param_vacreached: me.infotable_VacComplete.param_vacreached /* INTEGER */,
	state_cleaning: me.state_cleaning /* INTEGER */,
	param_utillizationleft: me.infotable_ProductLoadDone.param_utillizationleft /* INTEGER */,
	config_exitconveyor: me.config_exitconveyor /* INTEGER */,
	config_profilbelt: me.config_profilbelt /* INTEGER */,
	state_upstreamRTS: me.state_upstreamRTS /* INTEGER */,
	config_cognipro: me.config_cognipro /* INTEGER */,
	param_lifetimecycles: me.infotable_VacComplete.param_lifetimecycles /* INTEGER */,
	recipe_vactarget: me.recipe_vactarget /* INTEGER */,
	config_centralvac: me.config_centralvac /* INTEGER */,
	recipe_ultravacdelaytime: me.recipe_ultravacdelaytime /* INTEGER */,
	param_vac: me.param_vac /* INTEGER */,
	param_vaccomplete: me.param_vaccomplete /* INTEGER */,
	param_leakholdactive: me.param_leakholdactive /* INTEGER */,
	tVacuumDrawingTimeSeconds: me.infotable_bPreemptiveDataAvailable.tVacuumDrawingTimeSeconds /* INTEGER */,
	param_vacabort: me.param_vacabort /* INTEGER */,
	config_sealheightadj: me.config_sealheightadj /* INTEGER */,
	alarm_20: me.alarm_20 /* INTEGER */,
	state_stop: me.state_stop /* INTEGER */,
	rAirflow_Tensioning: me.infotable_bPreemptiveDataAvailable.rAirflow_Tensioning /* INTEGER */,
	state_leaktest: me.state_leaktest /* INTEGER */,
	recipe_lidopendelaytime: me.recipe_lidopendelaytime /* INTEGER */,
	config_productdirection: me.config_productdirection /* INTEGER */,
	config_preemptivetest: me.config_preemptivetest /* INTEGER */,
	rAirflow_Precutcylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Precutcylinders /* INTEGER */,
	param_utillizationright: me.infotable_ProductLoadDone.param_utillizationright /* INTEGER */,
	rLeak_VacuumPumpSide: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumPumpSide /* INTEGER */,
	param_leakmeasured: me.infotable_LeakHoldActive.param_leakmeasured /* INTEGER */,
	rLeak_VacuumChamber_Sealing: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Sealing /* INTEGER */,
	param_operationhours: me.param_operationhours /* INTEGER */,
	state_preemptivetest: me.state_preemptivetest /* INTEGER */,
	config_plc_prg: me.config_plc_prg /* INTEGER */,
	param_prodcountleft: me.param_prodcountleft /* INTEGER */,
	recipe_name: me.recipe_name /* INTEGER */,
	param_prodcountright: me.param_prodcountright /* INTEGER */,
	config_trimremovemonior: me.config_trimremovemonior /* INTEGER */,
	alarm_04: me.alarm_04 /* INTEGER */,
	recipe_vactime: me.recipe_vactime /* INTEGER */,
	alarm_05: me.alarm_05 /* INTEGER */,
	tVacuumLeaktestDuration: me.infotable_bPreemptiveDataAvailable.tVacuumLeaktestDuration /* INTEGER */,
	alarm_02: me.alarm_02 /* INTEGER */,
	param_leakpumpstate: me.param_leakpumpstate /* INTEGER */,
	alarm_03: me.alarm_03 /* INTEGER */,
	opmsg_beltspeedmed: me.opmsg_beltspeedmed /* INTEGER */,
	alarm_08: me.alarm_08 /* INTEGER */,
	recipe_vacprolongtime: me.recipe_vacprolongtime /* INTEGER */,
	param_pumphours: me.param_pumphours /* INTEGER */,
	param_vaccycletime: me.infotable_VacComplete.param_vaccycletime /* INTEGER */,
	rAirflow_BasePosition: me.infotable_bPreemptiveDataAvailable.rAirflow_BasePosition /* INTEGER */,
	recipe_productdetectionoffdelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	machineID: me.name /* STRING */,
	recipe_ultravactime: me.recipe_ultravactime /* INTEGER */,
	state_alarm: me.state_alarm /* INTEGER */,
	param_speedCPM: me.infotable_VacComplete.param_speedCPM /* INTEGER */,
	rAirflow_Chambercylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Chambercylinders /* INTEGER */,
	opmsg_beltspeedlow: me.opmsg_beltspeedlow /* INTEGER */,
	state_plcup: me.state_plcup /* INTEGER */,
	rAirflow_ReentryValve: me.infotable_bPreemptiveDataAvailable.rAirflow_ReentryValve /* INTEGER */,
	plcTimeStamp: dateFormat(currentTime,  "yyyy-MM-dd HH:mm:ss.SSS"),
	opmsg_bagdetectsensorright: me.opmsg_bagdetectsensorright /* INTEGER */,
	rLeak_VacuumChamber_Precut: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Precut /* INTEGER */,
	param_utillizationtotal: me.infotable_ProductLoadDone.param_utillizationtotal/* INTEGER */,
	param_productloaddone: me.param_productloaddone /* INTEGER */,
	config_exitsynchro: me.config_exitsynchro /* INTEGER */,
	recipe_vcsdeltatime: me.recipe_vcsdeltatime /* INTEGER */,
	rLeak_VacuumChamber_NoAction: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_NoAction /* INTEGER */,
	recipe_sealtimeleft: me.recipe_sealtimeleft /* INTEGER */,
	state_production: me.state_production /* INTEGER */,
	param_leaktestsource: me.param_leaktestsource /* INTEGER */,
	config_lineversion: me.config_lineversion /* INTEGER */,
	rAirflow_Sealing: me.infotable_bPreemptiveDataAvailable.rAirflow_Sealing /* INTEGER */,
	state_maintenance: me.state_maintenance /* INTEGER */,
	param_leakscantime: me.infotable_LeakHoldActive.param_leakscantime /* INTEGER */,
	param_vactimeprogress: me.param_vactimeprogress /* INTEGER */,
	param_prodcounttotal: me.param_prodcounttotal /* INTEGER */,
	recipe_vacmode: me.recipe_vacmode /* INTEGER */,
	opmsg_beltspeedhigh: me.opmsg_beltspeedhigh /* INTEGER */,
	state_downstreamRTR: me.state_downstreamRTR /* INTEGER */,
	recipe_sealtimeright: me.recipe_sealtimeright /* INTEGER */,
	recipe_vacholdtime: me.recipe_vacholdtime /* INTEGER */,
	param_speedcpm: me.infotable_VacComplete.param_speedcpm /* INTEGER */,
    state_run:me.state_run,
    param_cycletimestamp:me.infotable_VacComplete.param_cycletimestamp
};
//
me.insertDBRecord(params);
    
}
catch(e){
logger.error("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for state_production - Exception "+e);    
}

logger.debug("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for state_production - END");]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></Subscription><Subscription enabled="true" eventName="DataChange" source="" sourceProperty="state_run"><ServiceImplementation description="" handlerName="Script" name="Event.DataChange:Property.state_run"><ConfigurationTables><ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[logger.error("TT_RTTFT_VS95TS_V_0_0_1  Data Change subscription for state_run  - START");
try{

var currentTime = Date.now();
var params = {
	recipe_cooltime: me.recipe_cooltime /* INTEGER */,
	alarm_24: me.alarm_24 /* INTEGER */,
	recipe_prereentrytime: me.recipe_prereentrytime /* INTEGER */,
	recipe_productdetectionondelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	rAirflow_VacuumValve: me.infotable_bPreemptiveDataAvailable.rAirflow_VacuumValve /* INTEGER */,
	config_booster: me.config_booster /* INTEGER */,
	opmsg_bagdetectsensorleft: me.opmsg_bagdetectsensorleft /* INTEGER */,
	param_vacreached: me.infotable_VacComplete.param_vacreached /* INTEGER */,
	state_cleaning: me.state_cleaning /* INTEGER */,
	param_utillizationleft: me.infotable_ProductLoadDone.param_utillizationleft /* INTEGER */,
	config_exitconveyor: me.config_exitconveyor /* INTEGER */,
	config_profilbelt: me.config_profilbelt /* INTEGER */,
	state_upstreamRTS: me.state_upstreamRTS /* INTEGER */,
	config_cognipro: me.config_cognipro /* INTEGER */,
	param_lifetimecycles: me.infotable_VacComplete.param_lifetimecycles /* INTEGER */,
	recipe_vactarget: me.recipe_vactarget /* INTEGER */,
	config_centralvac: me.config_centralvac /* INTEGER */,
	recipe_ultravacdelaytime: me.recipe_ultravacdelaytime /* INTEGER */,
	param_vac: me.param_vac /* INTEGER */,
	param_vaccomplete: me.param_vaccomplete /* INTEGER */,
	param_leakholdactive: me.param_leakholdactive /* INTEGER */,
	tVacuumDrawingTimeSeconds: me.infotable_bPreemptiveDataAvailable.tVacuumDrawingTimeSeconds /* INTEGER */,
	param_vacabort: me.param_vacabort /* INTEGER */,
	config_sealheightadj: me.config_sealheightadj /* INTEGER */,
	alarm_20: me.alarm_20 /* INTEGER */,
	state_stop: me.state_stop /* INTEGER */,
	rAirflow_Tensioning: me.infotable_bPreemptiveDataAvailable.rAirflow_Tensioning /* INTEGER */,
	state_leaktest: me.state_leaktest /* INTEGER */,
	recipe_lidopendelaytime: me.recipe_lidopendelaytime /* INTEGER */,
	config_productdirection: me.config_productdirection /* INTEGER */,
	config_preemptivetest: me.config_preemptivetest /* INTEGER */,
	rAirflow_Precutcylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Precutcylinders /* INTEGER */,
	param_utillizationright: me.infotable_ProductLoadDone.param_utillizationright /* INTEGER */,
	rLeak_VacuumPumpSide: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumPumpSide /* INTEGER */,
	param_leakmeasured: me.infotable_LeakHoldActive.param_leakmeasured /* INTEGER */,
	rLeak_VacuumChamber_Sealing: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Sealing /* INTEGER */,
	param_operationhours: me.param_operationhours /* INTEGER */,
	state_preemptivetest: me.state_preemptivetest /* INTEGER */,
	config_plc_prg: me.config_plc_prg /* INTEGER */,
	param_prodcountleft: me.param_prodcountleft /* INTEGER */,
	recipe_name: me.recipe_name /* INTEGER */,
	param_prodcountright: me.param_prodcountright /* INTEGER */,
	config_trimremovemonior: me.config_trimremovemonior /* INTEGER */,
	alarm_04: me.alarm_04 /* INTEGER */,
	recipe_vactime: me.recipe_vactime /* INTEGER */,
	alarm_05: me.alarm_05 /* INTEGER */,
	tVacuumLeaktestDuration: me.infotable_bPreemptiveDataAvailable.tVacuumLeaktestDuration /* INTEGER */,
	alarm_02: me.alarm_02 /* INTEGER */,
	param_leakpumpstate: me.param_leakpumpstate /* INTEGER */,
	alarm_03: me.alarm_03 /* INTEGER */,
	opmsg_beltspeedmed: me.opmsg_beltspeedmed /* INTEGER */,
	alarm_08: me.alarm_08 /* INTEGER */,
	recipe_vacprolongtime: me.recipe_vacprolongtime /* INTEGER */,
	param_pumphours: me.param_pumphours /* INTEGER */,
	param_vaccycletime: me.infotable_VacComplete.param_vaccycletime /* INTEGER */,
	rAirflow_BasePosition: me.infotable_bPreemptiveDataAvailable.rAirflow_BasePosition /* INTEGER */,
	recipe_productdetectionoffdelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	machineID: me.name /* STRING */,
	recipe_ultravactime: me.recipe_ultravactime /* INTEGER */,
	state_alarm: me.state_alarm /* INTEGER */,
	param_speedCPM: me.infotable_VacComplete.param_speedCPM /* INTEGER */,
	rAirflow_Chambercylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Chambercylinders /* INTEGER */,
	opmsg_beltspeedlow: me.opmsg_beltspeedlow /* INTEGER */,
	state_plcup: me.state_plcup /* INTEGER */,
	rAirflow_ReentryValve: me.infotable_bPreemptiveDataAvailable.rAirflow_ReentryValve /* INTEGER */,
	plcTimeStamp: dateFormat(currentTime,  "yyyy-MM-dd HH:mm:ss.SSS"),
	opmsg_bagdetectsensorright: me.opmsg_bagdetectsensorright /* INTEGER */,
	rLeak_VacuumChamber_Precut: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Precut /* INTEGER */,
	param_utillizationtotal: me.infotable_ProductLoadDone.param_utillizationtotal/* INTEGER */,
	param_productloaddone: me.param_productloaddone /* INTEGER */,
	config_exitsynchro: me.config_exitsynchro /* INTEGER */,
	recipe_vcsdeltatime: me.recipe_vcsdeltatime /* INTEGER */,
	rLeak_VacuumChamber_NoAction: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_NoAction /* INTEGER */,
	recipe_sealtimeleft: me.recipe_sealtimeleft /* INTEGER */,
	state_production: me.state_production /* INTEGER */,
	param_leaktestsource: me.param_leaktestsource /* INTEGER */,
	config_lineversion: me.config_lineversion /* INTEGER */,
	rAirflow_Sealing: me.infotable_bPreemptiveDataAvailable.rAirflow_Sealing /* INTEGER */,
	state_maintenance: me.state_maintenance /* INTEGER */,
	param_leakscantime: me.infotable_LeakHoldActive.param_leakscantime /* INTEGER */,
	param_vactimeprogress: me.param_vactimeprogress /* INTEGER */,
	param_prodcounttotal: me.param_prodcounttotal /* INTEGER */,
	recipe_vacmode: me.recipe_vacmode /* INTEGER */,
	opmsg_beltspeedhigh: me.opmsg_beltspeedhigh /* INTEGER */,
	state_downstreamRTR: me.state_downstreamRTR /* INTEGER */,
	recipe_sealtimeright: me.recipe_sealtimeright /* INTEGER */,
	recipe_vacholdtime: me.recipe_vacholdtime /* INTEGER */,
	param_speedcpm: me.infotable_VacComplete.param_speedcpm /* INTEGER */,
    state_run:me.state_run,
    param_cycletimestamp:me.infotable_VacComplete.param_cycletimestamp
};
//
me.insertDBRecord(params);
    
}
catch(e){
logger.error("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for state_run - Exception "+e);    
}

logger.error("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for state_run- END");]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></Subscription><Subscription enabled="true" eventName="DataChange" source="" sourceProperty="state_stop"><ServiceImplementation description="" handlerName="Script" name="Event.DataChange:Property.state_stop"><ConfigurationTables><ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[logger.debug("TT_RTTFT_VS95TS_V_0_0_1  Data Change subscription for state_stop  - START "+me.name);
try{

var currentTime = Date.now();
var params = {
	recipe_cooltime: me.recipe_cooltime /* INTEGER */,
	alarm_24: me.alarm_24 /* INTEGER */,
	recipe_prereentrytime: me.recipe_prereentrytime /* INTEGER */,
	recipe_productdetectionondelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	rAirflow_VacuumValve: me.infotable_bPreemptiveDataAvailable.rAirflow_VacuumValve /* INTEGER */,
	config_booster: me.config_booster /* INTEGER */,
	opmsg_bagdetectsensorleft: me.opmsg_bagdetectsensorleft /* INTEGER */,
	param_vacreached: me.infotable_VacComplete.param_vacreached /* INTEGER */,
	state_cleaning: me.state_cleaning /* INTEGER */,
	param_utillizationleft: me.infotable_ProductLoadDone.param_utillizationleft /* INTEGER */,
	config_exitconveyor: me.config_exitconveyor /* INTEGER */,
	config_profilbelt: me.config_profilbelt /* INTEGER */,
	state_upstreamRTS: me.state_upstreamRTS /* INTEGER */,
	config_cognipro: me.config_cognipro /* INTEGER */,
	param_lifetimecycles: me.infotable_VacComplete.param_lifetimecycles /* INTEGER */,
	recipe_vactarget: me.recipe_vactarget /* INTEGER */,
	config_centralvac: me.config_centralvac /* INTEGER */,
	recipe_ultravacdelaytime: me.recipe_ultravacdelaytime /* INTEGER */,
	param_vac: me.param_vac /* INTEGER */,
	param_vaccomplete: me.param_vaccomplete /* INTEGER */,
	param_leakholdactive: me.param_leakholdactive /* INTEGER */,
	tVacuumDrawingTimeSeconds: me.infotable_bPreemptiveDataAvailable.tVacuumDrawingTimeSeconds /* INTEGER */,
	param_vacabort: me.param_vacabort /* INTEGER */,
	config_sealheightadj: me.config_sealheightadj /* INTEGER */,
	alarm_20: me.alarm_20 /* INTEGER */,
	state_stop: eventData.newValue.value/* INTEGER */,
	rAirflow_Tensioning: me.infotable_bPreemptiveDataAvailable.rAirflow_Tensioning /* INTEGER */,
	state_leaktest: me.state_leaktest /* INTEGER */,
	recipe_lidopendelaytime: me.recipe_lidopendelaytime /* INTEGER */,
	config_productdirection: me.config_productdirection /* INTEGER */,
	config_preemptivetest: me.config_preemptivetest /* INTEGER */,
	rAirflow_Precutcylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Precutcylinders /* INTEGER */,
	param_utillizationright: me.infotable_ProductLoadDone.param_utillizationright /* INTEGER */,
	rLeak_VacuumPumpSide: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumPumpSide /* INTEGER */,
	param_leakmeasured: me.infotable_LeakHoldActive.param_leakmeasured /* INTEGER */,
	rLeak_VacuumChamber_Sealing: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Sealing /* INTEGER */,
	param_operationhours: me.param_operationhours /* INTEGER */,
	state_preemptivetest: me.state_preemptivetest /* INTEGER */,
	config_plc_prg: me.config_plc_prg /* INTEGER */,
	param_prodcountleft: me.param_prodcountleft /* INTEGER */,
	recipe_name: me.recipe_name /* INTEGER */,
	param_prodcountright: me.param_prodcountright /* INTEGER */,
	config_trimremovemonior: me.config_trimremovemonior /* INTEGER */,
	alarm_04: me.alarm_04 /* INTEGER */,
	recipe_vactime: me.recipe_vactime /* INTEGER */,
	alarm_05: me.alarm_05 /* INTEGER */,
	tVacuumLeaktestDuration: me.infotable_bPreemptiveDataAvailable.tVacuumLeaktestDuration /* INTEGER */,
	alarm_02: me.alarm_02 /* INTEGER */,
	param_leakpumpstate: me.param_leakpumpstate /* INTEGER */,
	alarm_03: me.alarm_03 /* INTEGER */,
	opmsg_beltspeedmed: me.opmsg_beltspeedmed /* INTEGER */,
	alarm_08: me.alarm_08 /* INTEGER */,
	recipe_vacprolongtime: me.recipe_vacprolongtime /* INTEGER */,
	param_pumphours: me.param_pumphours /* INTEGER */,
	param_vaccycletime: me.infotable_VacComplete.param_vaccycletime /* INTEGER */,
	rAirflow_BasePosition: me.infotable_bPreemptiveDataAvailable.rAirflow_BasePosition /* INTEGER */,
	recipe_productdetectionoffdelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	machineID: me.name /* STRING */,
	recipe_ultravactime: me.recipe_ultravactime /* INTEGER */,
	state_alarm: me.state_alarm /* INTEGER */,
	param_speedCPM: me.infotable_VacComplete.param_speedCPM /* INTEGER */,
	rAirflow_Chambercylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Chambercylinders /* INTEGER */,
	opmsg_beltspeedlow: me.opmsg_beltspeedlow /* INTEGER */,
	state_plcup: me.state_plcup /* INTEGER */,
	rAirflow_ReentryValve: me.infotable_bPreemptiveDataAvailable.rAirflow_ReentryValve /* INTEGER */,
	plcTimeStamp: dateFormat(currentTime,  "yyyy-MM-dd HH:mm:ss.SSS"),
	opmsg_bagdetectsensorright: me.opmsg_bagdetectsensorright /* INTEGER */,
	rLeak_VacuumChamber_Precut: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Precut /* INTEGER */,
	param_utillizationtotal: me.infotable_ProductLoadDone.param_utillizationtotal/* INTEGER */,
	param_productloaddone: me.param_productloaddone /* INTEGER */,
	config_exitsynchro: me.config_exitsynchro /* INTEGER */,
	recipe_vcsdeltatime: me.recipe_vcsdeltatime /* INTEGER */,
	rLeak_VacuumChamber_NoAction: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_NoAction /* INTEGER */,
	recipe_sealtimeleft: me.recipe_sealtimeleft /* INTEGER */,
	state_production: me.state_production /* INTEGER */,
	param_leaktestsource: me.param_leaktestsource /* INTEGER */,
	config_lineversion: me.config_lineversion /* INTEGER */,
	rAirflow_Sealing: me.infotable_bPreemptiveDataAvailable.rAirflow_Sealing /* INTEGER */,
	state_maintenance: me.state_maintenance /* INTEGER */,
	param_leakscantime: me.infotable_LeakHoldActive.param_leakscantime /* INTEGER */,
	param_vactimeprogress: me.param_vactimeprogress /* INTEGER */,
	param_prodcounttotal: me.param_prodcounttotal /* INTEGER */,
	recipe_vacmode: me.recipe_vacmode /* INTEGER */,
	opmsg_beltspeedhigh: me.opmsg_beltspeedhigh /* INTEGER */,
	state_downstreamRTR: me.state_downstreamRTR /* INTEGER */,
	recipe_sealtimeright: me.recipe_sealtimeright /* INTEGER */,
	recipe_vacholdtime: me.recipe_vacholdtime /* INTEGER */,
	param_speedcpm: me.infotable_VacComplete.param_speedcpm /* INTEGER */,
    state_run:me.state_run,
    param_cycletimestamp:me.infotable_VacComplete.param_cycletimestamp
};
//
me.insertDBRecord(params);
    
}
catch(e){
logger.error("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for state_stop - Exception "+e);    
}

logger.debug("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for state_stop - END "+me.name);]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></Subscription><Subscription enabled="true" eventName="DataChange" source="" sourceProperty="state_upstreamRTS"><ServiceImplementation description="" handlerName="Script" name="Event.DataChange:Property.state_upstreamRTS"><ConfigurationTables><ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[logger.debug("TT_RTTFT_VS95TS_V_0_0_1  Data Change subscription for state_upstream - START "+me.name);
try{

var currentTime = Date.now();
var params = {
	recipe_cooltime: me.recipe_cooltime /* INTEGER */,
	alarm_24: me.alarm_24 /* INTEGER */,
	recipe_prereentrytime: me.recipe_prereentrytime /* INTEGER */,
	recipe_productdetectionondelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	rAirflow_VacuumValve: me.infotable_bPreemptiveDataAvailable.rAirflow_VacuumValve /* INTEGER */,
	config_booster: me.config_booster /* INTEGER */,
	opmsg_bagdetectsensorleft: me.opmsg_bagdetectsensorleft /* INTEGER */,
	param_vacreached: me.infotable_VacComplete.param_vacreached /* INTEGER */,
	state_cleaning: me.state_cleaning /* INTEGER */,
	param_utillizationleft: me.infotable_ProductLoadDone.param_utillizationleft /* INTEGER */,
	config_exitconveyor: me.config_exitconveyor /* INTEGER */,
	config_profilbelt: me.config_profilbelt /* INTEGER */,
	state_upstreamRTS: eventData.newValue.value /* INTEGER */,
	config_cognipro: me.config_cognipro /* INTEGER */,
	param_lifetimecycles: me.infotable_VacComplete.param_lifetimecycles /* INTEGER */,
	recipe_vactarget: me.recipe_vactarget /* INTEGER */,
	config_centralvac: me.config_centralvac /* INTEGER */,
	recipe_ultravacdelaytime: me.recipe_ultravacdelaytime /* INTEGER */,
	param_vac: me.param_vac /* INTEGER */,
	param_vaccomplete: me.param_vaccomplete /* INTEGER */,
	param_leakholdactive: me.param_leakholdactive /* INTEGER */,
	tVacuumDrawingTimeSeconds: me.infotable_bPreemptiveDataAvailable.tVacuumDrawingTimeSeconds /* INTEGER */,
	param_vacabort: me.param_vacabort /* INTEGER */,
	config_sealheightadj: me.config_sealheightadj /* INTEGER */,
	alarm_20: me.alarm_20 /* INTEGER */,
	state_stop: me.state_stop /* INTEGER */,
	rAirflow_Tensioning: me.infotable_bPreemptiveDataAvailable.rAirflow_Tensioning /* INTEGER */,
	state_leaktest: me.state_leaktest /* INTEGER */,
	recipe_lidopendelaytime: me.recipe_lidopendelaytime /* INTEGER */,
	config_productdirection: me.config_productdirection /* INTEGER */,
	config_preemptivetest: me.config_preemptivetest /* INTEGER */,
	rAirflow_Precutcylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Precutcylinders /* INTEGER */,
	param_utillizationright: me.infotable_ProductLoadDone.param_utillizationright /* INTEGER */,
	rLeak_VacuumPumpSide: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumPumpSide /* INTEGER */,
	param_leakmeasured: me.infotable_LeakHoldActive.param_leakmeasured /* INTEGER */,
	rLeak_VacuumChamber_Sealing: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Sealing /* INTEGER */,
	param_operationhours: me.param_operationhours /* INTEGER */,
	state_preemptivetest: me.state_preemptivetest /* INTEGER */,
	config_plc_prg: me.config_plc_prg /* INTEGER */,
	param_prodcountleft: me.param_prodcountleft /* INTEGER */,
	recipe_name: me.recipe_name /* INTEGER */,
	param_prodcountright: me.param_prodcountright /* INTEGER */,
	config_trimremovemonior: me.config_trimremovemonior /* INTEGER */,
	alarm_04: me.alarm_04 /* INTEGER */,
	recipe_vactime: me.recipe_vactime /* INTEGER */,
	alarm_05: me.alarm_05 /* INTEGER */,
	tVacuumLeaktestDuration: me.infotable_bPreemptiveDataAvailable.tVacuumLeaktestDuration /* INTEGER */,
	alarm_02: me.alarm_02 /* INTEGER */,
	param_leakpumpstate: me.param_leakpumpstate /* INTEGER */,
	alarm_03: me.alarm_03 /* INTEGER */,
	opmsg_beltspeedmed: me.opmsg_beltspeedmed /* INTEGER */,
	alarm_08: me.alarm_08 /* INTEGER */,
	recipe_vacprolongtime: me.recipe_vacprolongtime /* INTEGER */,
	param_pumphours: me.param_pumphours /* INTEGER */,
	param_vaccycletime: me.infotable_VacComplete.param_vaccycletime /* INTEGER */,
	rAirflow_BasePosition: me.infotable_bPreemptiveDataAvailable.rAirflow_BasePosition /* INTEGER */,
	recipe_productdetectionoffdelay: me.recipe_productdetectionoffdelay /* INTEGER */,
	machineID: me.name /* STRING */,
	recipe_ultravactime: me.recipe_ultravactime /* INTEGER */,
	state_alarm: me.state_alarm /* INTEGER */,
	param_speedCPM: me.infotable_VacComplete.param_speedCPM /* INTEGER */,
	rAirflow_Chambercylinders: me.infotable_bPreemptiveDataAvailable.rAirflow_Chambercylinders /* INTEGER */,
	opmsg_beltspeedlow: me.opmsg_beltspeedlow /* INTEGER */,
	state_plcup: me.state_plcup /* INTEGER */,
	rAirflow_ReentryValve: me.infotable_bPreemptiveDataAvailable.rAirflow_ReentryValve /* INTEGER */,
	plcTimeStamp: dateFormat(currentTime,  "yyyy-MM-dd HH:mm:ss.SSS"),
	opmsg_bagdetectsensorright: me.opmsg_bagdetectsensorright /* INTEGER */,
	rLeak_VacuumChamber_Precut: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_Precut /* INTEGER */,
	param_utillizationtotal: me.infotable_ProductLoadDone.param_utillizationtotal/* INTEGER */,
	param_productloaddone: me.param_productloaddone /* INTEGER */,
	config_exitsynchro: me.config_exitsynchro /* INTEGER */,
	recipe_vcsdeltatime: me.recipe_vcsdeltatime /* INTEGER */,
	rLeak_VacuumChamber_NoAction: me.infotable_bPreemptiveDataAvailable.rLeak_VacuumChamber_NoAction /* INTEGER */,
	recipe_sealtimeleft: me.recipe_sealtimeleft /* INTEGER */,
	state_production: me.state_production /* INTEGER */,
	param_leaktestsource: me.param_leaktestsource /* INTEGER */,
	config_lineversion: me.config_lineversion /* INTEGER */,
	rAirflow_Sealing: me.infotable_bPreemptiveDataAvailable.rAirflow_Sealing /* INTEGER */,
	state_maintenance: me.state_maintenance /* INTEGER */,
	param_leakscantime: me.infotable_LeakHoldActive.param_leakscantime /* INTEGER */,
	param_vactimeprogress: me.param_vactimeprogress /* INTEGER */,
	param_prodcounttotal: me.param_prodcounttotal /* INTEGER */,
	recipe_vacmode: me.recipe_vacmode /* INTEGER */,
	opmsg_beltspeedhigh: me.opmsg_beltspeedhigh /* INTEGER */,
	state_downstreamRTR: me.state_downstreamRTR /* INTEGER */,
	recipe_sealtimeright: me.recipe_sealtimeright /* INTEGER */,
	recipe_vacholdtime: me.recipe_vacholdtime /* INTEGER */,
	param_speedcpm: me.infotable_VacComplete.param_speedcpm /* INTEGER */,
    state_run:me.state_run,
    param_cycletimestamp:me.infotable_VacComplete.param_cycletimestamp
};
//
me.insertDBRecord(params);
    
}
catch(e){
logger.error("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for state_upstream - Exception "+e);    
}

logger.debug("TT_RTTFT_VS95TS_V_0_0_1 Data Change subscription for state_upstream - END "+me.name);]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></Subscription><Subscription enabled="true" eventName="Timer" source="postGres_VS95TS_1hrTimer" sourceProperty=""><ServiceImplementation description="" handlerName="Script" name="Type.Thing:Entity.postGres_VS95TS_1hrTimer:Event.Timer"><ConfigurationTables><ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[logger.debug("TT_RTTFT_VS95TS 1hr Subscription START "+me.name);
try {

var params = {
	assetID: me.name /* STRING */
};

// result: INFOTABLE
var result = Things["SEE_FC_PostGres_Database"].calculateKPIbyHour_VS95TS(params);


    
} catch(err) {
logger.error("TT_RTTFT_VS95TS 1hr Subscription error "+err+" "+me.name);
}
  
logger.debug("TT_RTTFT_VS95TS 1hr Subscription END "+me.name);]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></Subscription><Subscription enabled="true" eventName="Timer" source="postGres_VS95TS_1minTimer" sourceProperty=""><ServiceImplementation description="" handlerName="Script" name="Type.Thing:Entity.postGres_VS95TS_1minTimer:Event.Timer"><ConfigurationTables><ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[logger.debug("TT_RTTFT_VS95TS  - 1 min subscription STARTing "+me.name);
try {
var currentTime = Date.now();
var formattedTime = dateFormat(currentTime,"yyyy-MM-dd HH:mm:ss.SSS");
var shiftNoparams = {
	plcTime: formattedTime /* STRING */,
	assetID: me.name /* STRING */
};
var shiftNo;
// result: INFOTABLE
var shiftNoResult= Things["SEE_FC_PostGres_Database"].calculateShiftNo(shiftNoparams);
shiftNo = shiftNoResult.sp_vpp_getshiftnumber;
 

//var shiftStartTimeParams = {
//	plcTime: formattedTime /* STRING */,
//	assetID: me.name /* STRING */,
//	sensorTableName: me.postgresSensorDaTable /* STRING */,
//	shiftNo: shiftNo /* STRING */
//};
//
//// result: INFOTABLE
//var shiftstartTimeResult= Things["SEE_FC_PostGres_Database"].calculateShiftStartTime(shiftStartTimeParams);
//me.shiftStrtTime =shiftstartTimeResult.sp_cognipro_calculate_shift_start_time;
    
var calcParams = {
	assetID: me.name /* STRING */
};

// result: INFOTABLE
var result = Things["SEE_FC_PostGres_Database"].calculateKPIbyMinute_VS95TS(calcParams);
me.shiftNumber=shiftNo;
   
} catch(err) {
logger.warn("TT_RTTFT_VS95TS - 1 min subscription Error message "+err +" " +me.name);
}    
logger.debug("TT_RTTFT_VS95TS - 1 min subscription END "+me.name);]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></Subscription></Subscriptions></ThingShape><ImplementedShapes><ImplementedShape name="TS_VS95TS_Cognipro_Alarms" type="ThingShape"/><ImplementedShape name="TS_VS95TS_Cognipro_Parameters" type="ThingShape"/><ImplementedShape name="TS_VS95TS_Cognipro_KPI" type="ThingShape"/></ImplementedShapes><SharedConfigurationTables><ConfigurationTable description="Shared Tunneling Destinations" isMultiRow="true" name="SharedTunnels" ordinal="1"><DataShape><FieldDefinitions><FieldDefinition aspect.friendlyName="Application Path" baseType="STRING" description="Location of the client app that will use this tunnel" name="appUri" ordinal="5"/><FieldDefinition aspect.friendlyName="Description" baseType="STRING" description="A description of the tunnel" name="description" ordinal="3"/><FieldDefinition aspect.friendlyName="Host" baseType="STRING" description="Host or IP that this tunnel will connect to at the edge" name="host" ordinal="1"/><FieldDefinition aspect.friendlyName="Name" baseType="STRING" description="Name of the tunnel" name="name" ordinal="0"/><FieldDefinition aspect.friendlyName="Number of Connects" baseType="NUMBER" description="The number of connections required to establish this tunnel" name="numConnects" ordinal="4"/><FieldDefinition aspect.friendlyName="Port" baseType="NUMBER" description="Port that this tunnel will connect to at the edge" name="port" ordinal="2"/><FieldDefinition aspect.friendlyName="Protocol" baseType="STRING" description="The protocol used over this tunnel" name="proto" ordinal="6"/></FieldDefinitions></DataShape><Rows/></ConfigurationTable><ConfigurationTable description="Shared Remote Tunneling Settings" isMultiRow="false" name="SharedTunnelSettings" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition aspect.defaultValue="false" aspect.friendlyName="Enable Tunneling" baseType="BOOLEAN" description="Enable tunneling" name="enableTunneling" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><enableTunneling>false</enableTunneling></Row></Rows></ConfigurationTable></SharedConfigurationTables><InstanceDesignTimePermissions><Create/><Read/><Update/><Delete/><Metadata/></InstanceDesignTimePermissions><InstanceRunTimePermissions/><InstanceVisibilityPermissions><Visibility/></InstanceVisibilityPermissions><ConfigurationChanges><ConfigurationChange changeAction="CREATE" changeReason="header : name : updated, description : updated, documentationContent : updated&#10;" timestamp="2017-10-26T14:13:05.984Z" user="Brandon"/><ConfigurationChange changeAction="MODIFY" changeReason="header : tags : updated&#10;" timestamp="2017-10-27T20:01:45.247Z" user="Jennifer"/></ConfigurationChanges></ThingTemplate></ThingTemplates></Entities>